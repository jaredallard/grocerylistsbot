// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/jaredallard/grocerylistsbot/ent/predicate"
	"github.com/jaredallard/grocerylistsbot/ent/user"
	"github.com/jaredallard/grocerylistsbot/ent/useridmapping"
)

// UserIDMappingQuery is the builder for querying UserIDMapping entities.
type UserIDMappingQuery struct {
	config
	limit      *int
	offset     *int
	order      []Order
	unique     []string
	predicates []predicate.UserIDMapping
	// eager-loading edges.
	withUser *UserQuery
	withFKs  bool
	// intermediate query.
	sql *sql.Selector
}

// Where adds a new predicate for the builder.
func (uimq *UserIDMappingQuery) Where(ps ...predicate.UserIDMapping) *UserIDMappingQuery {
	uimq.predicates = append(uimq.predicates, ps...)
	return uimq
}

// Limit adds a limit step to the query.
func (uimq *UserIDMappingQuery) Limit(limit int) *UserIDMappingQuery {
	uimq.limit = &limit
	return uimq
}

// Offset adds an offset step to the query.
func (uimq *UserIDMappingQuery) Offset(offset int) *UserIDMappingQuery {
	uimq.offset = &offset
	return uimq
}

// Order adds an order step to the query.
func (uimq *UserIDMappingQuery) Order(o ...Order) *UserIDMappingQuery {
	uimq.order = append(uimq.order, o...)
	return uimq
}

// QueryUser chains the current query on the user edge.
func (uimq *UserIDMappingQuery) QueryUser() *UserQuery {
	query := &UserQuery{config: uimq.config}
	step := sqlgraph.NewStep(
		sqlgraph.From(useridmapping.Table, useridmapping.FieldID, uimq.sqlQuery()),
		sqlgraph.To(user.Table, user.FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, useridmapping.UserTable, useridmapping.UserColumn),
	)
	query.sql = sqlgraph.SetNeighbors(uimq.driver.Dialect(), step)
	return query
}

// First returns the first UserIDMapping entity in the query. Returns *NotFoundError when no useridmapping was found.
func (uimq *UserIDMappingQuery) First(ctx context.Context) (*UserIDMapping, error) {
	uims, err := uimq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(uims) == 0 {
		return nil, &NotFoundError{useridmapping.Label}
	}
	return uims[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (uimq *UserIDMappingQuery) FirstX(ctx context.Context) *UserIDMapping {
	uim, err := uimq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return uim
}

// FirstID returns the first UserIDMapping id in the query. Returns *NotFoundError when no id was found.
func (uimq *UserIDMappingQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = uimq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{useridmapping.Label}
		return
	}
	return ids[0], nil
}

// FirstXID is like FirstID, but panics if an error occurs.
func (uimq *UserIDMappingQuery) FirstXID(ctx context.Context) int {
	id, err := uimq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only UserIDMapping entity in the query, returns an error if not exactly one entity was returned.
func (uimq *UserIDMappingQuery) Only(ctx context.Context) (*UserIDMapping, error) {
	uims, err := uimq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(uims) {
	case 1:
		return uims[0], nil
	case 0:
		return nil, &NotFoundError{useridmapping.Label}
	default:
		return nil, &NotSingularError{useridmapping.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (uimq *UserIDMappingQuery) OnlyX(ctx context.Context) *UserIDMapping {
	uim, err := uimq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return uim
}

// OnlyID returns the only UserIDMapping id in the query, returns an error if not exactly one id was returned.
func (uimq *UserIDMappingQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = uimq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{useridmapping.Label}
	default:
		err = &NotSingularError{useridmapping.Label}
	}
	return
}

// OnlyXID is like OnlyID, but panics if an error occurs.
func (uimq *UserIDMappingQuery) OnlyXID(ctx context.Context) int {
	id, err := uimq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of UserIDMappings.
func (uimq *UserIDMappingQuery) All(ctx context.Context) ([]*UserIDMapping, error) {
	return uimq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (uimq *UserIDMappingQuery) AllX(ctx context.Context) []*UserIDMapping {
	uims, err := uimq.All(ctx)
	if err != nil {
		panic(err)
	}
	return uims
}

// IDs executes the query and returns a list of UserIDMapping ids.
func (uimq *UserIDMappingQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := uimq.Select(useridmapping.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (uimq *UserIDMappingQuery) IDsX(ctx context.Context) []int {
	ids, err := uimq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (uimq *UserIDMappingQuery) Count(ctx context.Context) (int, error) {
	return uimq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (uimq *UserIDMappingQuery) CountX(ctx context.Context) int {
	count, err := uimq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (uimq *UserIDMappingQuery) Exist(ctx context.Context) (bool, error) {
	return uimq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (uimq *UserIDMappingQuery) ExistX(ctx context.Context) bool {
	exist, err := uimq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (uimq *UserIDMappingQuery) Clone() *UserIDMappingQuery {
	return &UserIDMappingQuery{
		config:     uimq.config,
		limit:      uimq.limit,
		offset:     uimq.offset,
		order:      append([]Order{}, uimq.order...),
		unique:     append([]string{}, uimq.unique...),
		predicates: append([]predicate.UserIDMapping{}, uimq.predicates...),
		// clone intermediate query.
		sql: uimq.sql.Clone(),
	}
}

//  WithUser tells the query-builder to eager-loads the nodes that are connected to
// the "user" edge. The optional arguments used to configure the query builder of the edge.
func (uimq *UserIDMappingQuery) WithUser(opts ...func(*UserQuery)) *UserIDMappingQuery {
	query := &UserQuery{config: uimq.config}
	for _, opt := range opts {
		opt(query)
	}
	uimq.withUser = query
	return uimq
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.UserIDMapping.Query().
//		GroupBy(useridmapping.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (uimq *UserIDMappingQuery) GroupBy(field string, fields ...string) *UserIDMappingGroupBy {
	group := &UserIDMappingGroupBy{config: uimq.config}
	group.fields = append([]string{field}, fields...)
	group.sql = uimq.sqlQuery()
	return group
}

// Select one or more fields from the given query.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.UserIDMapping.Query().
//		Select(useridmapping.FieldCreatedAt).
//		Scan(ctx, &v)
//
func (uimq *UserIDMappingQuery) Select(field string, fields ...string) *UserIDMappingSelect {
	selector := &UserIDMappingSelect{config: uimq.config}
	selector.fields = append([]string{field}, fields...)
	selector.sql = uimq.sqlQuery()
	return selector
}

func (uimq *UserIDMappingQuery) sqlAll(ctx context.Context) ([]*UserIDMapping, error) {
	var (
		nodes   []*UserIDMapping = []*UserIDMapping{}
		withFKs                  = uimq.withFKs
		_spec                    = uimq.querySpec()
	)
	if uimq.withUser != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, useridmapping.ForeignKeys...)
	}
	_spec.ScanValues = func() []interface{} {
		node := &UserIDMapping{config: uimq.config}
		nodes = append(nodes, node)
		values := node.scanValues()
		if withFKs {
			values = append(values, node.fkValues()...)
		}
		return values
	}
	_spec.Assign = func(values ...interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		return node.assignValues(values...)
	}
	if err := sqlgraph.QueryNodes(ctx, uimq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := uimq.withUser; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*UserIDMapping)
		for i := range nodes {
			if fk := nodes[i].user_id_mapping_user_id; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(user.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "user_id_mapping_user_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.User = n
			}
		}
	}

	return nodes, nil
}

func (uimq *UserIDMappingQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := uimq.querySpec()
	return sqlgraph.CountNodes(ctx, uimq.driver, _spec)
}

func (uimq *UserIDMappingQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := uimq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (uimq *UserIDMappingQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   useridmapping.Table,
			Columns: useridmapping.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: useridmapping.FieldID,
			},
		},
		From:   uimq.sql,
		Unique: true,
	}
	if ps := uimq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := uimq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := uimq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := uimq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (uimq *UserIDMappingQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(uimq.driver.Dialect())
	t1 := builder.Table(useridmapping.Table)
	selector := builder.Select(t1.Columns(useridmapping.Columns...)...).From(t1)
	if uimq.sql != nil {
		selector = uimq.sql
		selector.Select(selector.Columns(useridmapping.Columns...)...)
	}
	for _, p := range uimq.predicates {
		p(selector)
	}
	for _, p := range uimq.order {
		p(selector)
	}
	if offset := uimq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := uimq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// UserIDMappingGroupBy is the builder for group-by UserIDMapping entities.
type UserIDMappingGroupBy struct {
	config
	fields []string
	fns    []Aggregate
	// intermediate query.
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the group-by query.
func (uimgb *UserIDMappingGroupBy) Aggregate(fns ...Aggregate) *UserIDMappingGroupBy {
	uimgb.fns = append(uimgb.fns, fns...)
	return uimgb
}

// Scan applies the group-by query and scan the result into the given value.
func (uimgb *UserIDMappingGroupBy) Scan(ctx context.Context, v interface{}) error {
	return uimgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (uimgb *UserIDMappingGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := uimgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (uimgb *UserIDMappingGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(uimgb.fields) > 1 {
		return nil, errors.New("ent: UserIDMappingGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := uimgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (uimgb *UserIDMappingGroupBy) StringsX(ctx context.Context) []string {
	v, err := uimgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (uimgb *UserIDMappingGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(uimgb.fields) > 1 {
		return nil, errors.New("ent: UserIDMappingGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := uimgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (uimgb *UserIDMappingGroupBy) IntsX(ctx context.Context) []int {
	v, err := uimgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (uimgb *UserIDMappingGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(uimgb.fields) > 1 {
		return nil, errors.New("ent: UserIDMappingGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := uimgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (uimgb *UserIDMappingGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := uimgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (uimgb *UserIDMappingGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(uimgb.fields) > 1 {
		return nil, errors.New("ent: UserIDMappingGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := uimgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (uimgb *UserIDMappingGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := uimgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (uimgb *UserIDMappingGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := uimgb.sqlQuery().Query()
	if err := uimgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (uimgb *UserIDMappingGroupBy) sqlQuery() *sql.Selector {
	selector := uimgb.sql
	columns := make([]string, 0, len(uimgb.fields)+len(uimgb.fns))
	columns = append(columns, uimgb.fields...)
	for _, fn := range uimgb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(uimgb.fields...)
}

// UserIDMappingSelect is the builder for select fields of UserIDMapping entities.
type UserIDMappingSelect struct {
	config
	fields []string
	// intermediate queries.
	sql *sql.Selector
}

// Scan applies the selector query and scan the result into the given value.
func (uims *UserIDMappingSelect) Scan(ctx context.Context, v interface{}) error {
	return uims.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (uims *UserIDMappingSelect) ScanX(ctx context.Context, v interface{}) {
	if err := uims.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (uims *UserIDMappingSelect) Strings(ctx context.Context) ([]string, error) {
	if len(uims.fields) > 1 {
		return nil, errors.New("ent: UserIDMappingSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := uims.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (uims *UserIDMappingSelect) StringsX(ctx context.Context) []string {
	v, err := uims.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (uims *UserIDMappingSelect) Ints(ctx context.Context) ([]int, error) {
	if len(uims.fields) > 1 {
		return nil, errors.New("ent: UserIDMappingSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := uims.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (uims *UserIDMappingSelect) IntsX(ctx context.Context) []int {
	v, err := uims.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (uims *UserIDMappingSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(uims.fields) > 1 {
		return nil, errors.New("ent: UserIDMappingSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := uims.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (uims *UserIDMappingSelect) Float64sX(ctx context.Context) []float64 {
	v, err := uims.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (uims *UserIDMappingSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(uims.fields) > 1 {
		return nil, errors.New("ent: UserIDMappingSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := uims.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (uims *UserIDMappingSelect) BoolsX(ctx context.Context) []bool {
	v, err := uims.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (uims *UserIDMappingSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := uims.sqlQuery().Query()
	if err := uims.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (uims *UserIDMappingSelect) sqlQuery() sql.Querier {
	selector := uims.sql
	selector.Select(selector.Columns(uims.fields...)...)
	return selector
}
