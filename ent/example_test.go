// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"log"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"

	"github.com/jaredallard/grocerylistsbot/ent/groceryitem"
	"github.com/jaredallard/grocerylistsbot/ent/useridmapping"
)

// dsn for the database. In order to run the tests locally, run the following command:
//
//	 ENT_INTEGRATION_ENDPOINT="root:pass@tcp(localhost:3306)/test?parseTime=True" go test -v
//
var dsn string

func ExampleGroceryItem() {
	if dsn == "" {
		return
	}
	ctx := context.Background()
	drv, err := sql.Open("mysql", dsn)
	if err != nil {
		log.Fatalf("failed creating database client: %v", err)
	}
	defer drv.Close()
	client := NewClient(Driver(drv))
	// creating vertices for the groceryitem's edges.
	gl0 := client.GroceryList.
		Create().
		SetCreatedAt(time.Now()).
		SetModifiedAt(time.Now()).
		SetDeletedAt(time.Now()).
		SetName("string").
		SaveX(ctx)
	log.Println("grocerylist created:", gl0)

	// create groceryitem vertex with its edges.
	gi := client.GroceryItem.
		Create().
		SetCreatedAt(time.Now()).
		SetModifiedAt(time.Now()).
		SetDeletedAt(time.Now()).
		SetName("string").
		SetStatus(groceryitem.StatusPurchased).
		SetPrice(1).
		SetGrocerylist(gl0).
		SaveX(ctx)
	log.Println("groceryitem created:", gi)

	// query edges.
	gl0, err = gi.QueryGrocerylist().First(ctx)
	if err != nil {
		log.Fatalf("failed querying grocerylist: %v", err)
	}
	log.Println("grocerylist found:", gl0)

	// Output:
}
func ExampleGroceryList() {
	if dsn == "" {
		return
	}
	ctx := context.Background()
	drv, err := sql.Open("mysql", dsn)
	if err != nil {
		log.Fatalf("failed creating database client: %v", err)
	}
	defer drv.Close()
	client := NewClient(Driver(drv))
	// creating vertices for the grocerylist's edges.

	// create grocerylist vertex with its edges.
	gl := client.GroceryList.
		Create().
		SetCreatedAt(time.Now()).
		SetModifiedAt(time.Now()).
		SetDeletedAt(time.Now()).
		SetName("string").
		SaveX(ctx)
	log.Println("grocerylist created:", gl)

	// query edges.

	// Output:
}
func ExampleUser() {
	if dsn == "" {
		return
	}
	ctx := context.Background()
	drv, err := sql.Open("mysql", dsn)
	if err != nil {
		log.Fatalf("failed creating database client: %v", err)
	}
	defer drv.Close()
	client := NewClient(Driver(drv))
	// creating vertices for the user's edges.
	gl0 := client.GroceryList.
		Create().
		SetCreatedAt(time.Now()).
		SetModifiedAt(time.Now()).
		SetDeletedAt(time.Now()).
		SetName("string").
		SaveX(ctx)
	log.Println("grocerylist created:", gl0)
	gl1 := client.GroceryList.
		Create().
		SetCreatedAt(time.Now()).
		SetModifiedAt(time.Now()).
		SetDeletedAt(time.Now()).
		SetName("string").
		SaveX(ctx)
	log.Println("grocerylist created:", gl1)

	// create user vertex with its edges.
	u := client.User.
		Create().
		SetCreatedAt(time.Now()).
		SetModifiedAt(time.Now()).
		SetDeletedAt(time.Now()).
		SetName("string").
		AddGrocerylist(gl0).
		SetActiveList(gl1).
		SaveX(ctx)
	log.Println("user created:", u)

	// query edges.
	gl0, err = u.QueryGrocerylist().First(ctx)
	if err != nil {
		log.Fatalf("failed querying grocerylist: %v", err)
	}
	log.Println("grocerylist found:", gl0)

	gl1, err = u.QueryActiveList().First(ctx)
	if err != nil {
		log.Fatalf("failed querying active_list: %v", err)
	}
	log.Println("active_list found:", gl1)

	// Output:
}
func ExampleUserIDMapping() {
	if dsn == "" {
		return
	}
	ctx := context.Background()
	drv, err := sql.Open("mysql", dsn)
	if err != nil {
		log.Fatalf("failed creating database client: %v", err)
	}
	defer drv.Close()
	client := NewClient(Driver(drv))
	// creating vertices for the useridmapping's edges.
	u0 := client.User.
		Create().
		SetCreatedAt(time.Now()).
		SetModifiedAt(time.Now()).
		SetDeletedAt(time.Now()).
		SetName("string").
		SaveX(ctx)
	log.Println("user created:", u0)

	// create useridmapping vertex with its edges.
	uim := client.UserIDMapping.
		Create().
		SetCreatedAt(time.Now()).
		SetModifiedAt(time.Now()).
		SetDeletedAt(time.Now()).
		SetPlatformType(useridmapping.PlatformTypeTelegram).
		SetPlatformID("string").
		SetUser(u0).
		SaveX(ctx)
	log.Println("useridmapping created:", uim)

	// query edges.
	u0, err = uim.QueryUser().First(ctx)
	if err != nil {
		log.Fatalf("failed querying user: %v", err)
	}
	log.Println("user found:", u0)

	// Output:
}
