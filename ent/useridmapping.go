// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/jaredallard/grocerylistsbot/ent/useridmapping"
)

// UserIDMapping is the model entity for the UserIDMapping schema.
type UserIDMapping struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// ModifiedAt holds the value of the "modified_at" field.
	ModifiedAt time.Time `json:"modified_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// PlatformType holds the value of the "platform_type" field.
	PlatformType useridmapping.PlatformType `json:"platform_type,omitempty"`
	// PlatformID holds the value of the "platform_id" field.
	PlatformID string `json:"platform_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserIDMappingQuery when eager-loading is set.
	Edges                   UserIDMappingEdges `json:"edges"`
	user_id_mapping_user_id *int
}

// UserIDMappingEdges holds the relations/edges for other nodes in the graph.
type UserIDMappingEdges struct {
	// User holds the value of the user edge.
	User *User
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserIDMapping) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullTime{},   // created_at
		&sql.NullTime{},   // modified_at
		&sql.NullTime{},   // deleted_at
		&sql.NullString{}, // platform_type
		&sql.NullString{}, // platform_id
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*UserIDMapping) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // user_id_mapping_user_id
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserIDMapping fields.
func (uim *UserIDMapping) assignValues(values ...interface{}) error {
	if m, n := len(values), len(useridmapping.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	uim.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field created_at", values[0])
	} else if value.Valid {
		uim.CreatedAt = value.Time
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field modified_at", values[1])
	} else if value.Valid {
		uim.ModifiedAt = value.Time
	}
	if value, ok := values[2].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field deleted_at", values[2])
	} else if value.Valid {
		uim.DeletedAt = new(time.Time)
		*uim.DeletedAt = value.Time
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field platform_type", values[3])
	} else if value.Valid {
		uim.PlatformType = useridmapping.PlatformType(value.String)
	}
	if value, ok := values[4].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field platform_id", values[4])
	} else if value.Valid {
		uim.PlatformID = value.String
	}
	values = values[5:]
	if len(values) == len(useridmapping.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field user_id_mapping_user_id", value)
		} else if value.Valid {
			uim.user_id_mapping_user_id = new(int)
			*uim.user_id_mapping_user_id = int(value.Int64)
		}
	}
	return nil
}

// QueryUser queries the user edge of the UserIDMapping.
func (uim *UserIDMapping) QueryUser() *UserQuery {
	return (&UserIDMappingClient{uim.config}).QueryUser(uim)
}

// Update returns a builder for updating this UserIDMapping.
// Note that, you need to call UserIDMapping.Unwrap() before calling this method, if this UserIDMapping
// was returned from a transaction, and the transaction was committed or rolled back.
func (uim *UserIDMapping) Update() *UserIDMappingUpdateOne {
	return (&UserIDMappingClient{uim.config}).UpdateOne(uim)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (uim *UserIDMapping) Unwrap() *UserIDMapping {
	tx, ok := uim.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserIDMapping is not a transactional entity")
	}
	uim.config.driver = tx.drv
	return uim
}

// String implements the fmt.Stringer.
func (uim *UserIDMapping) String() string {
	var builder strings.Builder
	builder.WriteString("UserIDMapping(")
	builder.WriteString(fmt.Sprintf("id=%v", uim.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(uim.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", modified_at=")
	builder.WriteString(uim.ModifiedAt.Format(time.ANSIC))
	if v := uim.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", platform_type=")
	builder.WriteString(fmt.Sprintf("%v", uim.PlatformType))
	builder.WriteString(", platform_id=")
	builder.WriteString(uim.PlatformID)
	builder.WriteByte(')')
	return builder.String()
}

// UserIDMappings is a parsable slice of UserIDMapping.
type UserIDMappings []*UserIDMapping

func (uim UserIDMappings) config(cfg config) {
	for _i := range uim {
		uim[_i].config = cfg
	}
}
