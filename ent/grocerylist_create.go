// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/jaredallard/grocerylistsbot/ent/grocerylist"
	"github.com/jaredallard/grocerylistsbot/ent/user"
)

// GroceryListCreate is the builder for creating a GroceryList entity.
type GroceryListCreate struct {
	config
	mutation *GroceryListMutation
	hooks    []Hook
}

// SetCreatedAt sets the created_at field.
func (glc *GroceryListCreate) SetCreatedAt(t time.Time) *GroceryListCreate {
	glc.mutation.SetCreatedAt(t)
	return glc
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (glc *GroceryListCreate) SetNillableCreatedAt(t *time.Time) *GroceryListCreate {
	if t != nil {
		glc.SetCreatedAt(*t)
	}
	return glc
}

// SetModifiedAt sets the modified_at field.
func (glc *GroceryListCreate) SetModifiedAt(t time.Time) *GroceryListCreate {
	glc.mutation.SetModifiedAt(t)
	return glc
}

// SetNillableModifiedAt sets the modified_at field if the given value is not nil.
func (glc *GroceryListCreate) SetNillableModifiedAt(t *time.Time) *GroceryListCreate {
	if t != nil {
		glc.SetModifiedAt(*t)
	}
	return glc
}

// SetDeletedAt sets the deleted_at field.
func (glc *GroceryListCreate) SetDeletedAt(t time.Time) *GroceryListCreate {
	glc.mutation.SetDeletedAt(t)
	return glc
}

// SetNillableDeletedAt sets the deleted_at field if the given value is not nil.
func (glc *GroceryListCreate) SetNillableDeletedAt(t *time.Time) *GroceryListCreate {
	if t != nil {
		glc.SetDeletedAt(*t)
	}
	return glc
}

// SetName sets the name field.
func (glc *GroceryListCreate) SetName(s string) *GroceryListCreate {
	glc.mutation.SetName(s)
	return glc
}

// SetNillableName sets the name field if the given value is not nil.
func (glc *GroceryListCreate) SetNillableName(s *string) *GroceryListCreate {
	if s != nil {
		glc.SetName(*s)
	}
	return glc
}

// AddMemberIDs adds the members edge to User by ids.
func (glc *GroceryListCreate) AddMemberIDs(ids ...int) *GroceryListCreate {
	glc.mutation.AddMemberIDs(ids...)
	return glc
}

// AddMembers adds the members edges to User.
func (glc *GroceryListCreate) AddMembers(u ...*User) *GroceryListCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return glc.AddMemberIDs(ids...)
}

// Save creates the GroceryList in the database.
func (glc *GroceryListCreate) Save(ctx context.Context) (*GroceryList, error) {
	if _, ok := glc.mutation.CreatedAt(); !ok {
		v := grocerylist.DefaultCreatedAt()
		glc.mutation.SetCreatedAt(v)
	}
	if _, ok := glc.mutation.ModifiedAt(); !ok {
		v := grocerylist.DefaultModifiedAt()
		glc.mutation.SetModifiedAt(v)
	}
	if _, ok := glc.mutation.Name(); !ok {
		v := grocerylist.DefaultName
		glc.mutation.SetName(v)
	}
	var (
		err  error
		node *GroceryList
	)
	if len(glc.hooks) == 0 {
		node, err = glc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GroceryListMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			glc.mutation = mutation
			node, err = glc.sqlSave(ctx)
			return node, err
		})
		for i := len(glc.hooks) - 1; i >= 0; i-- {
			mut = glc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, glc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (glc *GroceryListCreate) SaveX(ctx context.Context) *GroceryList {
	v, err := glc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (glc *GroceryListCreate) sqlSave(ctx context.Context) (*GroceryList, error) {
	var (
		gl    = &GroceryList{config: glc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: grocerylist.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: grocerylist.FieldID,
			},
		}
	)
	if value, ok := glc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: grocerylist.FieldCreatedAt,
		})
		gl.CreatedAt = value
	}
	if value, ok := glc.mutation.ModifiedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: grocerylist.FieldModifiedAt,
		})
		gl.ModifiedAt = value
	}
	if value, ok := glc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: grocerylist.FieldDeletedAt,
		})
		gl.DeletedAt = &value
	}
	if value, ok := glc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: grocerylist.FieldName,
		})
		gl.Name = value
	}
	if nodes := glc.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   grocerylist.MembersTable,
			Columns: grocerylist.MembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if err := sqlgraph.CreateNode(ctx, glc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	gl.ID = int(id)
	return gl, nil
}
