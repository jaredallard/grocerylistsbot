// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/jaredallard/grocerylistsbot/ent/user"
	"github.com/jaredallard/grocerylistsbot/ent/useridmapping"
)

// UserIDMappingCreate is the builder for creating a UserIDMapping entity.
type UserIDMappingCreate struct {
	config
	created_at    *time.Time
	modified_at   *time.Time
	deleted_at    *time.Time
	platform_type *useridmapping.PlatformType
	platform_id   *string
	user          map[int]struct{}
}

// SetCreatedAt sets the created_at field.
func (uimc *UserIDMappingCreate) SetCreatedAt(t time.Time) *UserIDMappingCreate {
	uimc.created_at = &t
	return uimc
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (uimc *UserIDMappingCreate) SetNillableCreatedAt(t *time.Time) *UserIDMappingCreate {
	if t != nil {
		uimc.SetCreatedAt(*t)
	}
	return uimc
}

// SetModifiedAt sets the modified_at field.
func (uimc *UserIDMappingCreate) SetModifiedAt(t time.Time) *UserIDMappingCreate {
	uimc.modified_at = &t
	return uimc
}

// SetNillableModifiedAt sets the modified_at field if the given value is not nil.
func (uimc *UserIDMappingCreate) SetNillableModifiedAt(t *time.Time) *UserIDMappingCreate {
	if t != nil {
		uimc.SetModifiedAt(*t)
	}
	return uimc
}

// SetDeletedAt sets the deleted_at field.
func (uimc *UserIDMappingCreate) SetDeletedAt(t time.Time) *UserIDMappingCreate {
	uimc.deleted_at = &t
	return uimc
}

// SetNillableDeletedAt sets the deleted_at field if the given value is not nil.
func (uimc *UserIDMappingCreate) SetNillableDeletedAt(t *time.Time) *UserIDMappingCreate {
	if t != nil {
		uimc.SetDeletedAt(*t)
	}
	return uimc
}

// SetPlatformType sets the platform_type field.
func (uimc *UserIDMappingCreate) SetPlatformType(ut useridmapping.PlatformType) *UserIDMappingCreate {
	uimc.platform_type = &ut
	return uimc
}

// SetPlatformID sets the platform_id field.
func (uimc *UserIDMappingCreate) SetPlatformID(s string) *UserIDMappingCreate {
	uimc.platform_id = &s
	return uimc
}

// SetUserID sets the user edge to User by id.
func (uimc *UserIDMappingCreate) SetUserID(id int) *UserIDMappingCreate {
	if uimc.user == nil {
		uimc.user = make(map[int]struct{})
	}
	uimc.user[id] = struct{}{}
	return uimc
}

// SetNillableUserID sets the user edge to User by id if the given value is not nil.
func (uimc *UserIDMappingCreate) SetNillableUserID(id *int) *UserIDMappingCreate {
	if id != nil {
		uimc = uimc.SetUserID(*id)
	}
	return uimc
}

// SetUser sets the user edge to User.
func (uimc *UserIDMappingCreate) SetUser(u *User) *UserIDMappingCreate {
	return uimc.SetUserID(u.ID)
}

// Save creates the UserIDMapping in the database.
func (uimc *UserIDMappingCreate) Save(ctx context.Context) (*UserIDMapping, error) {
	if uimc.created_at == nil {
		v := useridmapping.DefaultCreatedAt()
		uimc.created_at = &v
	}
	if uimc.modified_at == nil {
		v := useridmapping.DefaultModifiedAt()
		uimc.modified_at = &v
	}
	if uimc.platform_type == nil {
		return nil, errors.New("ent: missing required field \"platform_type\"")
	}
	if err := useridmapping.PlatformTypeValidator(*uimc.platform_type); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"platform_type\": %v", err)
	}
	if uimc.platform_id == nil {
		return nil, errors.New("ent: missing required field \"platform_id\"")
	}
	if len(uimc.user) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"user\"")
	}
	return uimc.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (uimc *UserIDMappingCreate) SaveX(ctx context.Context) *UserIDMapping {
	v, err := uimc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (uimc *UserIDMappingCreate) sqlSave(ctx context.Context) (*UserIDMapping, error) {
	var (
		uim   = &UserIDMapping{config: uimc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: useridmapping.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: useridmapping.FieldID,
			},
		}
	)
	if value := uimc.created_at; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: useridmapping.FieldCreatedAt,
		})
		uim.CreatedAt = *value
	}
	if value := uimc.modified_at; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: useridmapping.FieldModifiedAt,
		})
		uim.ModifiedAt = *value
	}
	if value := uimc.deleted_at; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: useridmapping.FieldDeletedAt,
		})
		uim.DeletedAt = value
	}
	if value := uimc.platform_type; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  *value,
			Column: useridmapping.FieldPlatformType,
		})
		uim.PlatformType = *value
	}
	if value := uimc.platform_id; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: useridmapping.FieldPlatformID,
		})
		uim.PlatformID = *value
	}
	if nodes := uimc.user; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   useridmapping.UserTable,
			Columns: []string{useridmapping.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if err := sqlgraph.CreateNode(ctx, uimc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	uim.ID = int(id)
	return uim, nil
}
