// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/jaredallard/grocerylistsbot/ent/grocerylist"
	"github.com/jaredallard/grocerylistsbot/ent/user"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	created_at  *time.Time
	modified_at *time.Time
	deleted_at  *time.Time
	name        *string
	grocerylist map[int]struct{}
	active_list map[int]struct{}
}

// SetCreatedAt sets the created_at field.
func (uc *UserCreate) SetCreatedAt(t time.Time) *UserCreate {
	uc.created_at = &t
	return uc
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (uc *UserCreate) SetNillableCreatedAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetCreatedAt(*t)
	}
	return uc
}

// SetModifiedAt sets the modified_at field.
func (uc *UserCreate) SetModifiedAt(t time.Time) *UserCreate {
	uc.modified_at = &t
	return uc
}

// SetNillableModifiedAt sets the modified_at field if the given value is not nil.
func (uc *UserCreate) SetNillableModifiedAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetModifiedAt(*t)
	}
	return uc
}

// SetDeletedAt sets the deleted_at field.
func (uc *UserCreate) SetDeletedAt(t time.Time) *UserCreate {
	uc.deleted_at = &t
	return uc
}

// SetNillableDeletedAt sets the deleted_at field if the given value is not nil.
func (uc *UserCreate) SetNillableDeletedAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetDeletedAt(*t)
	}
	return uc
}

// SetName sets the name field.
func (uc *UserCreate) SetName(s string) *UserCreate {
	uc.name = &s
	return uc
}

// AddGrocerylistIDs adds the grocerylist edge to GroceryList by ids.
func (uc *UserCreate) AddGrocerylistIDs(ids ...int) *UserCreate {
	if uc.grocerylist == nil {
		uc.grocerylist = make(map[int]struct{})
	}
	for i := range ids {
		uc.grocerylist[ids[i]] = struct{}{}
	}
	return uc
}

// AddGrocerylist adds the grocerylist edges to GroceryList.
func (uc *UserCreate) AddGrocerylist(g ...*GroceryList) *UserCreate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uc.AddGrocerylistIDs(ids...)
}

// SetActiveListID sets the active_list edge to GroceryList by id.
func (uc *UserCreate) SetActiveListID(id int) *UserCreate {
	if uc.active_list == nil {
		uc.active_list = make(map[int]struct{})
	}
	uc.active_list[id] = struct{}{}
	return uc
}

// SetNillableActiveListID sets the active_list edge to GroceryList by id if the given value is not nil.
func (uc *UserCreate) SetNillableActiveListID(id *int) *UserCreate {
	if id != nil {
		uc = uc.SetActiveListID(*id)
	}
	return uc
}

// SetActiveList sets the active_list edge to GroceryList.
func (uc *UserCreate) SetActiveList(g *GroceryList) *UserCreate {
	return uc.SetActiveListID(g.ID)
}

// Save creates the User in the database.
func (uc *UserCreate) Save(ctx context.Context) (*User, error) {
	if uc.created_at == nil {
		v := user.DefaultCreatedAt()
		uc.created_at = &v
	}
	if uc.modified_at == nil {
		v := user.DefaultModifiedAt()
		uc.modified_at = &v
	}
	if uc.name == nil {
		return nil, errors.New("ent: missing required field \"name\"")
	}
	if len(uc.active_list) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"active_list\"")
	}
	return uc.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UserCreate) SaveX(ctx context.Context) *User {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (uc *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	var (
		u     = &User{config: uc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: user.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		}
	)
	if value := uc.created_at; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: user.FieldCreatedAt,
		})
		u.CreatedAt = *value
	}
	if value := uc.modified_at; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: user.FieldModifiedAt,
		})
		u.ModifiedAt = *value
	}
	if value := uc.deleted_at; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: user.FieldDeletedAt,
		})
		u.DeletedAt = value
	}
	if value := uc.name; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: user.FieldName,
		})
		u.Name = *value
	}
	if nodes := uc.grocerylist; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.GrocerylistTable,
			Columns: user.GrocerylistPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: grocerylist.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.active_list; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.ActiveListTable,
			Columns: []string{user.ActiveListColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: grocerylist.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	u.ID = int(id)
	return u, nil
}
