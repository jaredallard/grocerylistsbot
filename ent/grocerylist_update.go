// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/jaredallard/grocerylistsbot/ent/grocerylist"
	"github.com/jaredallard/grocerylistsbot/ent/predicate"
	"github.com/jaredallard/grocerylistsbot/ent/user"
)

// GroceryListUpdate is the builder for updating GroceryList entities.
type GroceryListUpdate struct {
	config
	created_at      *time.Time
	modified_at     *time.Time
	deleted_at      *time.Time
	cleardeleted_at bool
	name            *string
	members         map[int]struct{}
	removedMembers  map[int]struct{}
	predicates      []predicate.GroceryList
}

// Where adds a new predicate for the builder.
func (glu *GroceryListUpdate) Where(ps ...predicate.GroceryList) *GroceryListUpdate {
	glu.predicates = append(glu.predicates, ps...)
	return glu
}

// SetCreatedAt sets the created_at field.
func (glu *GroceryListUpdate) SetCreatedAt(t time.Time) *GroceryListUpdate {
	glu.created_at = &t
	return glu
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (glu *GroceryListUpdate) SetNillableCreatedAt(t *time.Time) *GroceryListUpdate {
	if t != nil {
		glu.SetCreatedAt(*t)
	}
	return glu
}

// SetModifiedAt sets the modified_at field.
func (glu *GroceryListUpdate) SetModifiedAt(t time.Time) *GroceryListUpdate {
	glu.modified_at = &t
	return glu
}

// SetNillableModifiedAt sets the modified_at field if the given value is not nil.
func (glu *GroceryListUpdate) SetNillableModifiedAt(t *time.Time) *GroceryListUpdate {
	if t != nil {
		glu.SetModifiedAt(*t)
	}
	return glu
}

// SetDeletedAt sets the deleted_at field.
func (glu *GroceryListUpdate) SetDeletedAt(t time.Time) *GroceryListUpdate {
	glu.deleted_at = &t
	return glu
}

// SetNillableDeletedAt sets the deleted_at field if the given value is not nil.
func (glu *GroceryListUpdate) SetNillableDeletedAt(t *time.Time) *GroceryListUpdate {
	if t != nil {
		glu.SetDeletedAt(*t)
	}
	return glu
}

// ClearDeletedAt clears the value of deleted_at.
func (glu *GroceryListUpdate) ClearDeletedAt() *GroceryListUpdate {
	glu.deleted_at = nil
	glu.cleardeleted_at = true
	return glu
}

// SetName sets the name field.
func (glu *GroceryListUpdate) SetName(s string) *GroceryListUpdate {
	glu.name = &s
	return glu
}

// SetNillableName sets the name field if the given value is not nil.
func (glu *GroceryListUpdate) SetNillableName(s *string) *GroceryListUpdate {
	if s != nil {
		glu.SetName(*s)
	}
	return glu
}

// AddMemberIDs adds the members edge to User by ids.
func (glu *GroceryListUpdate) AddMemberIDs(ids ...int) *GroceryListUpdate {
	if glu.members == nil {
		glu.members = make(map[int]struct{})
	}
	for i := range ids {
		glu.members[ids[i]] = struct{}{}
	}
	return glu
}

// AddMembers adds the members edges to User.
func (glu *GroceryListUpdate) AddMembers(u ...*User) *GroceryListUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return glu.AddMemberIDs(ids...)
}

// RemoveMemberIDs removes the members edge to User by ids.
func (glu *GroceryListUpdate) RemoveMemberIDs(ids ...int) *GroceryListUpdate {
	if glu.removedMembers == nil {
		glu.removedMembers = make(map[int]struct{})
	}
	for i := range ids {
		glu.removedMembers[ids[i]] = struct{}{}
	}
	return glu
}

// RemoveMembers removes members edges to User.
func (glu *GroceryListUpdate) RemoveMembers(u ...*User) *GroceryListUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return glu.RemoveMemberIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (glu *GroceryListUpdate) Save(ctx context.Context) (int, error) {
	return glu.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (glu *GroceryListUpdate) SaveX(ctx context.Context) int {
	affected, err := glu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (glu *GroceryListUpdate) Exec(ctx context.Context) error {
	_, err := glu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (glu *GroceryListUpdate) ExecX(ctx context.Context) {
	if err := glu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (glu *GroceryListUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   grocerylist.Table,
			Columns: grocerylist.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: grocerylist.FieldID,
			},
		},
	}
	if ps := glu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value := glu.created_at; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: grocerylist.FieldCreatedAt,
		})
	}
	if value := glu.modified_at; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: grocerylist.FieldModifiedAt,
		})
	}
	if value := glu.deleted_at; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: grocerylist.FieldDeletedAt,
		})
	}
	if glu.cleardeleted_at {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: grocerylist.FieldDeletedAt,
		})
	}
	if value := glu.name; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: grocerylist.FieldName,
		})
	}
	if nodes := glu.removedMembers; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   grocerylist.MembersTable,
			Columns: grocerylist.MembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := glu.members; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   grocerylist.MembersTable,
			Columns: grocerylist.MembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, glu.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// GroceryListUpdateOne is the builder for updating a single GroceryList entity.
type GroceryListUpdateOne struct {
	config
	id              int
	created_at      *time.Time
	modified_at     *time.Time
	deleted_at      *time.Time
	cleardeleted_at bool
	name            *string
	members         map[int]struct{}
	removedMembers  map[int]struct{}
}

// SetCreatedAt sets the created_at field.
func (gluo *GroceryListUpdateOne) SetCreatedAt(t time.Time) *GroceryListUpdateOne {
	gluo.created_at = &t
	return gluo
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (gluo *GroceryListUpdateOne) SetNillableCreatedAt(t *time.Time) *GroceryListUpdateOne {
	if t != nil {
		gluo.SetCreatedAt(*t)
	}
	return gluo
}

// SetModifiedAt sets the modified_at field.
func (gluo *GroceryListUpdateOne) SetModifiedAt(t time.Time) *GroceryListUpdateOne {
	gluo.modified_at = &t
	return gluo
}

// SetNillableModifiedAt sets the modified_at field if the given value is not nil.
func (gluo *GroceryListUpdateOne) SetNillableModifiedAt(t *time.Time) *GroceryListUpdateOne {
	if t != nil {
		gluo.SetModifiedAt(*t)
	}
	return gluo
}

// SetDeletedAt sets the deleted_at field.
func (gluo *GroceryListUpdateOne) SetDeletedAt(t time.Time) *GroceryListUpdateOne {
	gluo.deleted_at = &t
	return gluo
}

// SetNillableDeletedAt sets the deleted_at field if the given value is not nil.
func (gluo *GroceryListUpdateOne) SetNillableDeletedAt(t *time.Time) *GroceryListUpdateOne {
	if t != nil {
		gluo.SetDeletedAt(*t)
	}
	return gluo
}

// ClearDeletedAt clears the value of deleted_at.
func (gluo *GroceryListUpdateOne) ClearDeletedAt() *GroceryListUpdateOne {
	gluo.deleted_at = nil
	gluo.cleardeleted_at = true
	return gluo
}

// SetName sets the name field.
func (gluo *GroceryListUpdateOne) SetName(s string) *GroceryListUpdateOne {
	gluo.name = &s
	return gluo
}

// SetNillableName sets the name field if the given value is not nil.
func (gluo *GroceryListUpdateOne) SetNillableName(s *string) *GroceryListUpdateOne {
	if s != nil {
		gluo.SetName(*s)
	}
	return gluo
}

// AddMemberIDs adds the members edge to User by ids.
func (gluo *GroceryListUpdateOne) AddMemberIDs(ids ...int) *GroceryListUpdateOne {
	if gluo.members == nil {
		gluo.members = make(map[int]struct{})
	}
	for i := range ids {
		gluo.members[ids[i]] = struct{}{}
	}
	return gluo
}

// AddMembers adds the members edges to User.
func (gluo *GroceryListUpdateOne) AddMembers(u ...*User) *GroceryListUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return gluo.AddMemberIDs(ids...)
}

// RemoveMemberIDs removes the members edge to User by ids.
func (gluo *GroceryListUpdateOne) RemoveMemberIDs(ids ...int) *GroceryListUpdateOne {
	if gluo.removedMembers == nil {
		gluo.removedMembers = make(map[int]struct{})
	}
	for i := range ids {
		gluo.removedMembers[ids[i]] = struct{}{}
	}
	return gluo
}

// RemoveMembers removes members edges to User.
func (gluo *GroceryListUpdateOne) RemoveMembers(u ...*User) *GroceryListUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return gluo.RemoveMemberIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (gluo *GroceryListUpdateOne) Save(ctx context.Context) (*GroceryList, error) {
	return gluo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (gluo *GroceryListUpdateOne) SaveX(ctx context.Context) *GroceryList {
	gl, err := gluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return gl
}

// Exec executes the query on the entity.
func (gluo *GroceryListUpdateOne) Exec(ctx context.Context) error {
	_, err := gluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gluo *GroceryListUpdateOne) ExecX(ctx context.Context) {
	if err := gluo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (gluo *GroceryListUpdateOne) sqlSave(ctx context.Context) (gl *GroceryList, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   grocerylist.Table,
			Columns: grocerylist.Columns,
			ID: &sqlgraph.FieldSpec{
				Value:  gluo.id,
				Type:   field.TypeInt,
				Column: grocerylist.FieldID,
			},
		},
	}
	if value := gluo.created_at; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: grocerylist.FieldCreatedAt,
		})
	}
	if value := gluo.modified_at; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: grocerylist.FieldModifiedAt,
		})
	}
	if value := gluo.deleted_at; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: grocerylist.FieldDeletedAt,
		})
	}
	if gluo.cleardeleted_at {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: grocerylist.FieldDeletedAt,
		})
	}
	if value := gluo.name; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: grocerylist.FieldName,
		})
	}
	if nodes := gluo.removedMembers; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   grocerylist.MembersTable,
			Columns: grocerylist.MembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gluo.members; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   grocerylist.MembersTable,
			Columns: grocerylist.MembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	gl = &GroceryList{config: gluo.config}
	_spec.Assign = gl.assignValues
	_spec.ScanValues = gl.scanValues()
	if err = sqlgraph.UpdateNode(ctx, gluo.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return gl, nil
}
