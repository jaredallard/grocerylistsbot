// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/jaredallard/grocerylistsbot/ent/grocerylist"
	"github.com/jaredallard/grocerylistsbot/ent/predicate"
)

// GroceryListDelete is the builder for deleting a GroceryList entity.
type GroceryListDelete struct {
	config
	predicates []predicate.GroceryList
}

// Where adds a new predicate to the delete builder.
func (gld *GroceryListDelete) Where(ps ...predicate.GroceryList) *GroceryListDelete {
	gld.predicates = append(gld.predicates, ps...)
	return gld
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (gld *GroceryListDelete) Exec(ctx context.Context) (int, error) {
	return gld.sqlExec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (gld *GroceryListDelete) ExecX(ctx context.Context) int {
	n, err := gld.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (gld *GroceryListDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := &sqlgraph.DeleteSpec{
		Node: &sqlgraph.NodeSpec{
			Table: grocerylist.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: grocerylist.FieldID,
			},
		},
	}
	if ps := gld.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return sqlgraph.DeleteNodes(ctx, gld.driver, _spec)
}

// GroceryListDeleteOne is the builder for deleting a single GroceryList entity.
type GroceryListDeleteOne struct {
	gld *GroceryListDelete
}

// Exec executes the deletion query.
func (gldo *GroceryListDeleteOne) Exec(ctx context.Context) error {
	n, err := gldo.gld.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{grocerylist.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (gldo *GroceryListDeleteOne) ExecX(ctx context.Context) {
	gldo.gld.ExecX(ctx)
}
