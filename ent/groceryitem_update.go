// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/jaredallard/grocerylistsbot/ent/groceryitem"
	"github.com/jaredallard/grocerylistsbot/ent/grocerylist"
	"github.com/jaredallard/grocerylistsbot/ent/predicate"
)

// GroceryItemUpdate is the builder for updating GroceryItem entities.
type GroceryItemUpdate struct {
	config
	created_at         *time.Time
	modified_at        *time.Time
	deleted_at         *time.Time
	cleardeleted_at    bool
	name               *string
	status             *groceryitem.Status
	price              *float64
	addprice           *float64
	clearprice         bool
	grocerylist        map[int]struct{}
	clearedGrocerylist bool
	predicates         []predicate.GroceryItem
}

// Where adds a new predicate for the builder.
func (giu *GroceryItemUpdate) Where(ps ...predicate.GroceryItem) *GroceryItemUpdate {
	giu.predicates = append(giu.predicates, ps...)
	return giu
}

// SetCreatedAt sets the created_at field.
func (giu *GroceryItemUpdate) SetCreatedAt(t time.Time) *GroceryItemUpdate {
	giu.created_at = &t
	return giu
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (giu *GroceryItemUpdate) SetNillableCreatedAt(t *time.Time) *GroceryItemUpdate {
	if t != nil {
		giu.SetCreatedAt(*t)
	}
	return giu
}

// SetModifiedAt sets the modified_at field.
func (giu *GroceryItemUpdate) SetModifiedAt(t time.Time) *GroceryItemUpdate {
	giu.modified_at = &t
	return giu
}

// SetNillableModifiedAt sets the modified_at field if the given value is not nil.
func (giu *GroceryItemUpdate) SetNillableModifiedAt(t *time.Time) *GroceryItemUpdate {
	if t != nil {
		giu.SetModifiedAt(*t)
	}
	return giu
}

// SetDeletedAt sets the deleted_at field.
func (giu *GroceryItemUpdate) SetDeletedAt(t time.Time) *GroceryItemUpdate {
	giu.deleted_at = &t
	return giu
}

// SetNillableDeletedAt sets the deleted_at field if the given value is not nil.
func (giu *GroceryItemUpdate) SetNillableDeletedAt(t *time.Time) *GroceryItemUpdate {
	if t != nil {
		giu.SetDeletedAt(*t)
	}
	return giu
}

// ClearDeletedAt clears the value of deleted_at.
func (giu *GroceryItemUpdate) ClearDeletedAt() *GroceryItemUpdate {
	giu.deleted_at = nil
	giu.cleardeleted_at = true
	return giu
}

// SetName sets the name field.
func (giu *GroceryItemUpdate) SetName(s string) *GroceryItemUpdate {
	giu.name = &s
	return giu
}

// SetStatus sets the status field.
func (giu *GroceryItemUpdate) SetStatus(gr groceryitem.Status) *GroceryItemUpdate {
	giu.status = &gr
	return giu
}

// SetNillableStatus sets the status field if the given value is not nil.
func (giu *GroceryItemUpdate) SetNillableStatus(gr *groceryitem.Status) *GroceryItemUpdate {
	if gr != nil {
		giu.SetStatus(*gr)
	}
	return giu
}

// SetPrice sets the price field.
func (giu *GroceryItemUpdate) SetPrice(f float64) *GroceryItemUpdate {
	giu.price = &f
	giu.addprice = nil
	return giu
}

// SetNillablePrice sets the price field if the given value is not nil.
func (giu *GroceryItemUpdate) SetNillablePrice(f *float64) *GroceryItemUpdate {
	if f != nil {
		giu.SetPrice(*f)
	}
	return giu
}

// AddPrice adds f to price.
func (giu *GroceryItemUpdate) AddPrice(f float64) *GroceryItemUpdate {
	if giu.addprice == nil {
		giu.addprice = &f
	} else {
		*giu.addprice += f
	}
	return giu
}

// ClearPrice clears the value of price.
func (giu *GroceryItemUpdate) ClearPrice() *GroceryItemUpdate {
	giu.price = nil
	giu.clearprice = true
	return giu
}

// SetGrocerylistID sets the grocerylist edge to GroceryList by id.
func (giu *GroceryItemUpdate) SetGrocerylistID(id int) *GroceryItemUpdate {
	if giu.grocerylist == nil {
		giu.grocerylist = make(map[int]struct{})
	}
	giu.grocerylist[id] = struct{}{}
	return giu
}

// SetNillableGrocerylistID sets the grocerylist edge to GroceryList by id if the given value is not nil.
func (giu *GroceryItemUpdate) SetNillableGrocerylistID(id *int) *GroceryItemUpdate {
	if id != nil {
		giu = giu.SetGrocerylistID(*id)
	}
	return giu
}

// SetGrocerylist sets the grocerylist edge to GroceryList.
func (giu *GroceryItemUpdate) SetGrocerylist(g *GroceryList) *GroceryItemUpdate {
	return giu.SetGrocerylistID(g.ID)
}

// ClearGrocerylist clears the grocerylist edge to GroceryList.
func (giu *GroceryItemUpdate) ClearGrocerylist() *GroceryItemUpdate {
	giu.clearedGrocerylist = true
	return giu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (giu *GroceryItemUpdate) Save(ctx context.Context) (int, error) {
	if giu.status != nil {
		if err := groceryitem.StatusValidator(*giu.status); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"status\": %v", err)
		}
	}
	if len(giu.grocerylist) > 1 {
		return 0, errors.New("ent: multiple assignments on a unique edge \"grocerylist\"")
	}
	return giu.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (giu *GroceryItemUpdate) SaveX(ctx context.Context) int {
	affected, err := giu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (giu *GroceryItemUpdate) Exec(ctx context.Context) error {
	_, err := giu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (giu *GroceryItemUpdate) ExecX(ctx context.Context) {
	if err := giu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (giu *GroceryItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   groceryitem.Table,
			Columns: groceryitem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: groceryitem.FieldID,
			},
		},
	}
	if ps := giu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value := giu.created_at; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: groceryitem.FieldCreatedAt,
		})
	}
	if value := giu.modified_at; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: groceryitem.FieldModifiedAt,
		})
	}
	if value := giu.deleted_at; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: groceryitem.FieldDeletedAt,
		})
	}
	if giu.cleardeleted_at {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: groceryitem.FieldDeletedAt,
		})
	}
	if value := giu.name; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: groceryitem.FieldName,
		})
	}
	if value := giu.status; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  *value,
			Column: groceryitem.FieldStatus,
		})
	}
	if value := giu.price; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  *value,
			Column: groceryitem.FieldPrice,
		})
	}
	if value := giu.addprice; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  *value,
			Column: groceryitem.FieldPrice,
		})
	}
	if giu.clearprice {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: groceryitem.FieldPrice,
		})
	}
	if giu.clearedGrocerylist {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   groceryitem.GrocerylistTable,
			Columns: []string{groceryitem.GrocerylistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: grocerylist.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := giu.grocerylist; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   groceryitem.GrocerylistTable,
			Columns: []string{groceryitem.GrocerylistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: grocerylist.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, giu.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// GroceryItemUpdateOne is the builder for updating a single GroceryItem entity.
type GroceryItemUpdateOne struct {
	config
	id                 int
	created_at         *time.Time
	modified_at        *time.Time
	deleted_at         *time.Time
	cleardeleted_at    bool
	name               *string
	status             *groceryitem.Status
	price              *float64
	addprice           *float64
	clearprice         bool
	grocerylist        map[int]struct{}
	clearedGrocerylist bool
}

// SetCreatedAt sets the created_at field.
func (giuo *GroceryItemUpdateOne) SetCreatedAt(t time.Time) *GroceryItemUpdateOne {
	giuo.created_at = &t
	return giuo
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (giuo *GroceryItemUpdateOne) SetNillableCreatedAt(t *time.Time) *GroceryItemUpdateOne {
	if t != nil {
		giuo.SetCreatedAt(*t)
	}
	return giuo
}

// SetModifiedAt sets the modified_at field.
func (giuo *GroceryItemUpdateOne) SetModifiedAt(t time.Time) *GroceryItemUpdateOne {
	giuo.modified_at = &t
	return giuo
}

// SetNillableModifiedAt sets the modified_at field if the given value is not nil.
func (giuo *GroceryItemUpdateOne) SetNillableModifiedAt(t *time.Time) *GroceryItemUpdateOne {
	if t != nil {
		giuo.SetModifiedAt(*t)
	}
	return giuo
}

// SetDeletedAt sets the deleted_at field.
func (giuo *GroceryItemUpdateOne) SetDeletedAt(t time.Time) *GroceryItemUpdateOne {
	giuo.deleted_at = &t
	return giuo
}

// SetNillableDeletedAt sets the deleted_at field if the given value is not nil.
func (giuo *GroceryItemUpdateOne) SetNillableDeletedAt(t *time.Time) *GroceryItemUpdateOne {
	if t != nil {
		giuo.SetDeletedAt(*t)
	}
	return giuo
}

// ClearDeletedAt clears the value of deleted_at.
func (giuo *GroceryItemUpdateOne) ClearDeletedAt() *GroceryItemUpdateOne {
	giuo.deleted_at = nil
	giuo.cleardeleted_at = true
	return giuo
}

// SetName sets the name field.
func (giuo *GroceryItemUpdateOne) SetName(s string) *GroceryItemUpdateOne {
	giuo.name = &s
	return giuo
}

// SetStatus sets the status field.
func (giuo *GroceryItemUpdateOne) SetStatus(gr groceryitem.Status) *GroceryItemUpdateOne {
	giuo.status = &gr
	return giuo
}

// SetNillableStatus sets the status field if the given value is not nil.
func (giuo *GroceryItemUpdateOne) SetNillableStatus(gr *groceryitem.Status) *GroceryItemUpdateOne {
	if gr != nil {
		giuo.SetStatus(*gr)
	}
	return giuo
}

// SetPrice sets the price field.
func (giuo *GroceryItemUpdateOne) SetPrice(f float64) *GroceryItemUpdateOne {
	giuo.price = &f
	giuo.addprice = nil
	return giuo
}

// SetNillablePrice sets the price field if the given value is not nil.
func (giuo *GroceryItemUpdateOne) SetNillablePrice(f *float64) *GroceryItemUpdateOne {
	if f != nil {
		giuo.SetPrice(*f)
	}
	return giuo
}

// AddPrice adds f to price.
func (giuo *GroceryItemUpdateOne) AddPrice(f float64) *GroceryItemUpdateOne {
	if giuo.addprice == nil {
		giuo.addprice = &f
	} else {
		*giuo.addprice += f
	}
	return giuo
}

// ClearPrice clears the value of price.
func (giuo *GroceryItemUpdateOne) ClearPrice() *GroceryItemUpdateOne {
	giuo.price = nil
	giuo.clearprice = true
	return giuo
}

// SetGrocerylistID sets the grocerylist edge to GroceryList by id.
func (giuo *GroceryItemUpdateOne) SetGrocerylistID(id int) *GroceryItemUpdateOne {
	if giuo.grocerylist == nil {
		giuo.grocerylist = make(map[int]struct{})
	}
	giuo.grocerylist[id] = struct{}{}
	return giuo
}

// SetNillableGrocerylistID sets the grocerylist edge to GroceryList by id if the given value is not nil.
func (giuo *GroceryItemUpdateOne) SetNillableGrocerylistID(id *int) *GroceryItemUpdateOne {
	if id != nil {
		giuo = giuo.SetGrocerylistID(*id)
	}
	return giuo
}

// SetGrocerylist sets the grocerylist edge to GroceryList.
func (giuo *GroceryItemUpdateOne) SetGrocerylist(g *GroceryList) *GroceryItemUpdateOne {
	return giuo.SetGrocerylistID(g.ID)
}

// ClearGrocerylist clears the grocerylist edge to GroceryList.
func (giuo *GroceryItemUpdateOne) ClearGrocerylist() *GroceryItemUpdateOne {
	giuo.clearedGrocerylist = true
	return giuo
}

// Save executes the query and returns the updated entity.
func (giuo *GroceryItemUpdateOne) Save(ctx context.Context) (*GroceryItem, error) {
	if giuo.status != nil {
		if err := groceryitem.StatusValidator(*giuo.status); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"status\": %v", err)
		}
	}
	if len(giuo.grocerylist) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"grocerylist\"")
	}
	return giuo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (giuo *GroceryItemUpdateOne) SaveX(ctx context.Context) *GroceryItem {
	gi, err := giuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return gi
}

// Exec executes the query on the entity.
func (giuo *GroceryItemUpdateOne) Exec(ctx context.Context) error {
	_, err := giuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (giuo *GroceryItemUpdateOne) ExecX(ctx context.Context) {
	if err := giuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (giuo *GroceryItemUpdateOne) sqlSave(ctx context.Context) (gi *GroceryItem, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   groceryitem.Table,
			Columns: groceryitem.Columns,
			ID: &sqlgraph.FieldSpec{
				Value:  giuo.id,
				Type:   field.TypeInt,
				Column: groceryitem.FieldID,
			},
		},
	}
	if value := giuo.created_at; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: groceryitem.FieldCreatedAt,
		})
	}
	if value := giuo.modified_at; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: groceryitem.FieldModifiedAt,
		})
	}
	if value := giuo.deleted_at; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: groceryitem.FieldDeletedAt,
		})
	}
	if giuo.cleardeleted_at {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: groceryitem.FieldDeletedAt,
		})
	}
	if value := giuo.name; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: groceryitem.FieldName,
		})
	}
	if value := giuo.status; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  *value,
			Column: groceryitem.FieldStatus,
		})
	}
	if value := giuo.price; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  *value,
			Column: groceryitem.FieldPrice,
		})
	}
	if value := giuo.addprice; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  *value,
			Column: groceryitem.FieldPrice,
		})
	}
	if giuo.clearprice {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: groceryitem.FieldPrice,
		})
	}
	if giuo.clearedGrocerylist {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   groceryitem.GrocerylistTable,
			Columns: []string{groceryitem.GrocerylistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: grocerylist.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := giuo.grocerylist; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   groceryitem.GrocerylistTable,
			Columns: []string{groceryitem.GrocerylistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: grocerylist.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	gi = &GroceryItem{config: giuo.config}
	_spec.Assign = gi.assignValues
	_spec.ScanValues = gi.scanValues()
	if err = sqlgraph.UpdateNode(ctx, giuo.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return gi, nil
}
