// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/jaredallard/grocerylistsbot/ent/grocerylist"
	"github.com/jaredallard/grocerylistsbot/ent/predicate"
	"github.com/jaredallard/grocerylistsbot/ent/user"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	created_at         *time.Time
	modified_at        *time.Time
	deleted_at         *time.Time
	cleardeleted_at    bool
	name               *string
	grocerylist        map[int]struct{}
	active_list        map[int]struct{}
	removedGrocerylist map[int]struct{}
	clearedActiveList  bool
	predicates         []predicate.User
}

// Where adds a new predicate for the builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.predicates = append(uu.predicates, ps...)
	return uu
}

// SetCreatedAt sets the created_at field.
func (uu *UserUpdate) SetCreatedAt(t time.Time) *UserUpdate {
	uu.created_at = &t
	return uu
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (uu *UserUpdate) SetNillableCreatedAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetCreatedAt(*t)
	}
	return uu
}

// SetModifiedAt sets the modified_at field.
func (uu *UserUpdate) SetModifiedAt(t time.Time) *UserUpdate {
	uu.modified_at = &t
	return uu
}

// SetNillableModifiedAt sets the modified_at field if the given value is not nil.
func (uu *UserUpdate) SetNillableModifiedAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetModifiedAt(*t)
	}
	return uu
}

// SetDeletedAt sets the deleted_at field.
func (uu *UserUpdate) SetDeletedAt(t time.Time) *UserUpdate {
	uu.deleted_at = &t
	return uu
}

// SetNillableDeletedAt sets the deleted_at field if the given value is not nil.
func (uu *UserUpdate) SetNillableDeletedAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetDeletedAt(*t)
	}
	return uu
}

// ClearDeletedAt clears the value of deleted_at.
func (uu *UserUpdate) ClearDeletedAt() *UserUpdate {
	uu.deleted_at = nil
	uu.cleardeleted_at = true
	return uu
}

// SetName sets the name field.
func (uu *UserUpdate) SetName(s string) *UserUpdate {
	uu.name = &s
	return uu
}

// AddGrocerylistIDs adds the grocerylist edge to GroceryList by ids.
func (uu *UserUpdate) AddGrocerylistIDs(ids ...int) *UserUpdate {
	if uu.grocerylist == nil {
		uu.grocerylist = make(map[int]struct{})
	}
	for i := range ids {
		uu.grocerylist[ids[i]] = struct{}{}
	}
	return uu
}

// AddGrocerylist adds the grocerylist edges to GroceryList.
func (uu *UserUpdate) AddGrocerylist(g ...*GroceryList) *UserUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uu.AddGrocerylistIDs(ids...)
}

// SetActiveListID sets the active_list edge to GroceryList by id.
func (uu *UserUpdate) SetActiveListID(id int) *UserUpdate {
	if uu.active_list == nil {
		uu.active_list = make(map[int]struct{})
	}
	uu.active_list[id] = struct{}{}
	return uu
}

// SetNillableActiveListID sets the active_list edge to GroceryList by id if the given value is not nil.
func (uu *UserUpdate) SetNillableActiveListID(id *int) *UserUpdate {
	if id != nil {
		uu = uu.SetActiveListID(*id)
	}
	return uu
}

// SetActiveList sets the active_list edge to GroceryList.
func (uu *UserUpdate) SetActiveList(g *GroceryList) *UserUpdate {
	return uu.SetActiveListID(g.ID)
}

// RemoveGrocerylistIDs removes the grocerylist edge to GroceryList by ids.
func (uu *UserUpdate) RemoveGrocerylistIDs(ids ...int) *UserUpdate {
	if uu.removedGrocerylist == nil {
		uu.removedGrocerylist = make(map[int]struct{})
	}
	for i := range ids {
		uu.removedGrocerylist[ids[i]] = struct{}{}
	}
	return uu
}

// RemoveGrocerylist removes grocerylist edges to GroceryList.
func (uu *UserUpdate) RemoveGrocerylist(g ...*GroceryList) *UserUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uu.RemoveGrocerylistIDs(ids...)
}

// ClearActiveList clears the active_list edge to GroceryList.
func (uu *UserUpdate) ClearActiveList() *UserUpdate {
	uu.clearedActiveList = true
	return uu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	if len(uu.active_list) > 1 {
		return 0, errors.New("ent: multiple assignments on a unique edge \"active_list\"")
	}
	return uu.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		},
	}
	if ps := uu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value := uu.created_at; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: user.FieldCreatedAt,
		})
	}
	if value := uu.modified_at; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: user.FieldModifiedAt,
		})
	}
	if value := uu.deleted_at; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: user.FieldDeletedAt,
		})
	}
	if uu.cleardeleted_at {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: user.FieldDeletedAt,
		})
	}
	if value := uu.name; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: user.FieldName,
		})
	}
	if nodes := uu.removedGrocerylist; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.GrocerylistTable,
			Columns: user.GrocerylistPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: grocerylist.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.grocerylist; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.GrocerylistTable,
			Columns: user.GrocerylistPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: grocerylist.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.clearedActiveList {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.ActiveListTable,
			Columns: []string{user.ActiveListColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: grocerylist.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.active_list; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.ActiveListTable,
			Columns: []string{user.ActiveListColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: grocerylist.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	id                 int
	created_at         *time.Time
	modified_at        *time.Time
	deleted_at         *time.Time
	cleardeleted_at    bool
	name               *string
	grocerylist        map[int]struct{}
	active_list        map[int]struct{}
	removedGrocerylist map[int]struct{}
	clearedActiveList  bool
}

// SetCreatedAt sets the created_at field.
func (uuo *UserUpdateOne) SetCreatedAt(t time.Time) *UserUpdateOne {
	uuo.created_at = &t
	return uuo
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCreatedAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetCreatedAt(*t)
	}
	return uuo
}

// SetModifiedAt sets the modified_at field.
func (uuo *UserUpdateOne) SetModifiedAt(t time.Time) *UserUpdateOne {
	uuo.modified_at = &t
	return uuo
}

// SetNillableModifiedAt sets the modified_at field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableModifiedAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetModifiedAt(*t)
	}
	return uuo
}

// SetDeletedAt sets the deleted_at field.
func (uuo *UserUpdateOne) SetDeletedAt(t time.Time) *UserUpdateOne {
	uuo.deleted_at = &t
	return uuo
}

// SetNillableDeletedAt sets the deleted_at field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableDeletedAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetDeletedAt(*t)
	}
	return uuo
}

// ClearDeletedAt clears the value of deleted_at.
func (uuo *UserUpdateOne) ClearDeletedAt() *UserUpdateOne {
	uuo.deleted_at = nil
	uuo.cleardeleted_at = true
	return uuo
}

// SetName sets the name field.
func (uuo *UserUpdateOne) SetName(s string) *UserUpdateOne {
	uuo.name = &s
	return uuo
}

// AddGrocerylistIDs adds the grocerylist edge to GroceryList by ids.
func (uuo *UserUpdateOne) AddGrocerylistIDs(ids ...int) *UserUpdateOne {
	if uuo.grocerylist == nil {
		uuo.grocerylist = make(map[int]struct{})
	}
	for i := range ids {
		uuo.grocerylist[ids[i]] = struct{}{}
	}
	return uuo
}

// AddGrocerylist adds the grocerylist edges to GroceryList.
func (uuo *UserUpdateOne) AddGrocerylist(g ...*GroceryList) *UserUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uuo.AddGrocerylistIDs(ids...)
}

// SetActiveListID sets the active_list edge to GroceryList by id.
func (uuo *UserUpdateOne) SetActiveListID(id int) *UserUpdateOne {
	if uuo.active_list == nil {
		uuo.active_list = make(map[int]struct{})
	}
	uuo.active_list[id] = struct{}{}
	return uuo
}

// SetNillableActiveListID sets the active_list edge to GroceryList by id if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableActiveListID(id *int) *UserUpdateOne {
	if id != nil {
		uuo = uuo.SetActiveListID(*id)
	}
	return uuo
}

// SetActiveList sets the active_list edge to GroceryList.
func (uuo *UserUpdateOne) SetActiveList(g *GroceryList) *UserUpdateOne {
	return uuo.SetActiveListID(g.ID)
}

// RemoveGrocerylistIDs removes the grocerylist edge to GroceryList by ids.
func (uuo *UserUpdateOne) RemoveGrocerylistIDs(ids ...int) *UserUpdateOne {
	if uuo.removedGrocerylist == nil {
		uuo.removedGrocerylist = make(map[int]struct{})
	}
	for i := range ids {
		uuo.removedGrocerylist[ids[i]] = struct{}{}
	}
	return uuo
}

// RemoveGrocerylist removes grocerylist edges to GroceryList.
func (uuo *UserUpdateOne) RemoveGrocerylist(g ...*GroceryList) *UserUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uuo.RemoveGrocerylistIDs(ids...)
}

// ClearActiveList clears the active_list edge to GroceryList.
func (uuo *UserUpdateOne) ClearActiveList() *UserUpdateOne {
	uuo.clearedActiveList = true
	return uuo
}

// Save executes the query and returns the updated entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	if len(uuo.active_list) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"active_list\"")
	}
	return uuo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	u, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return u
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (u *User, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Value:  uuo.id,
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		},
	}
	if value := uuo.created_at; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: user.FieldCreatedAt,
		})
	}
	if value := uuo.modified_at; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: user.FieldModifiedAt,
		})
	}
	if value := uuo.deleted_at; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: user.FieldDeletedAt,
		})
	}
	if uuo.cleardeleted_at {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: user.FieldDeletedAt,
		})
	}
	if value := uuo.name; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: user.FieldName,
		})
	}
	if nodes := uuo.removedGrocerylist; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.GrocerylistTable,
			Columns: user.GrocerylistPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: grocerylist.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.grocerylist; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.GrocerylistTable,
			Columns: user.GrocerylistPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: grocerylist.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.clearedActiveList {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.ActiveListTable,
			Columns: []string{user.ActiveListColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: grocerylist.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.active_list; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.ActiveListTable,
			Columns: []string{user.ActiveListColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: grocerylist.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	u = &User{config: uuo.config}
	_spec.Assign = u.assignValues
	_spec.ScanValues = u.scanValues()
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return u, nil
}
