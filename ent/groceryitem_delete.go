// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/jaredallard/grocerylistsbot/ent/groceryitem"
	"github.com/jaredallard/grocerylistsbot/ent/predicate"
)

// GroceryItemDelete is the builder for deleting a GroceryItem entity.
type GroceryItemDelete struct {
	config
	predicates []predicate.GroceryItem
}

// Where adds a new predicate to the delete builder.
func (gid *GroceryItemDelete) Where(ps ...predicate.GroceryItem) *GroceryItemDelete {
	gid.predicates = append(gid.predicates, ps...)
	return gid
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (gid *GroceryItemDelete) Exec(ctx context.Context) (int, error) {
	return gid.sqlExec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (gid *GroceryItemDelete) ExecX(ctx context.Context) int {
	n, err := gid.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (gid *GroceryItemDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := &sqlgraph.DeleteSpec{
		Node: &sqlgraph.NodeSpec{
			Table: groceryitem.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: groceryitem.FieldID,
			},
		},
	}
	if ps := gid.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return sqlgraph.DeleteNodes(ctx, gid.driver, _spec)
}

// GroceryItemDeleteOne is the builder for deleting a single GroceryItem entity.
type GroceryItemDeleteOne struct {
	gid *GroceryItemDelete
}

// Exec executes the deletion query.
func (gido *GroceryItemDeleteOne) Exec(ctx context.Context) error {
	n, err := gido.gid.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{groceryitem.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (gido *GroceryItemDeleteOne) ExecX(ctx context.Context) {
	gido.gid.ExecX(ctx)
}
