// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/jaredallard/grocerylistsbot/ent/migrate"

	"github.com/jaredallard/grocerylistsbot/ent/groceryitem"
	"github.com/jaredallard/grocerylistsbot/ent/grocerylist"
	"github.com/jaredallard/grocerylistsbot/ent/user"
	"github.com/jaredallard/grocerylistsbot/ent/useridmapping"

	"github.com/facebookincubator/ent/dialect"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// GroceryItem is the client for interacting with the GroceryItem builders.
	GroceryItem *GroceryItemClient
	// GroceryList is the client for interacting with the GroceryList builders.
	GroceryList *GroceryListClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// UserIDMapping is the client for interacting with the UserIDMapping builders.
	UserIDMapping *UserIDMappingClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.GroceryItem = NewGroceryItemClient(c.config)
	c.GroceryList = NewGroceryListClient(c.config)
	c.User = NewUserClient(c.config)
	c.UserIDMapping = NewUserIDMappingClient(c.config)
}

// Open opens a connection to the database specified by the driver name and a
// driver-specific data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		config:        cfg,
		GroceryItem:   NewGroceryItemClient(cfg),
		GroceryList:   NewGroceryListClient(cfg),
		User:          NewUserClient(cfg),
		UserIDMapping: NewUserIDMappingClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		GroceryItem.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.GroceryItem.Use(hooks...)
	c.GroceryList.Use(hooks...)
	c.User.Use(hooks...)
	c.UserIDMapping.Use(hooks...)
}

// GroceryItemClient is a client for the GroceryItem schema.
type GroceryItemClient struct {
	config
}

// NewGroceryItemClient returns a client for the GroceryItem from the given config.
func NewGroceryItemClient(c config) *GroceryItemClient {
	return &GroceryItemClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `groceryitem.Hooks(f(g(h())))`.
func (c *GroceryItemClient) Use(hooks ...Hook) {
	c.hooks.GroceryItem = append(c.hooks.GroceryItem, hooks...)
}

// Create returns a create builder for GroceryItem.
func (c *GroceryItemClient) Create() *GroceryItemCreate {
	mutation := newGroceryItemMutation(c.config, OpCreate)
	return &GroceryItemCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for GroceryItem.
func (c *GroceryItemClient) Update() *GroceryItemUpdate {
	mutation := newGroceryItemMutation(c.config, OpUpdate)
	return &GroceryItemUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GroceryItemClient) UpdateOne(gi *GroceryItem) *GroceryItemUpdateOne {
	return c.UpdateOneID(gi.ID)
}

// UpdateOneID returns an update builder for the given id.
func (c *GroceryItemClient) UpdateOneID(id int) *GroceryItemUpdateOne {
	mutation := newGroceryItemMutation(c.config, OpUpdateOne)
	mutation.id = &id
	return &GroceryItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GroceryItem.
func (c *GroceryItemClient) Delete() *GroceryItemDelete {
	mutation := newGroceryItemMutation(c.config, OpDelete)
	return &GroceryItemDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *GroceryItemClient) DeleteOne(gi *GroceryItem) *GroceryItemDeleteOne {
	return c.DeleteOneID(gi.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *GroceryItemClient) DeleteOneID(id int) *GroceryItemDeleteOne {
	builder := c.Delete().Where(groceryitem.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GroceryItemDeleteOne{builder}
}

// Create returns a query builder for GroceryItem.
func (c *GroceryItemClient) Query() *GroceryItemQuery {
	return &GroceryItemQuery{config: c.config}
}

// Get returns a GroceryItem entity by its id.
func (c *GroceryItemClient) Get(ctx context.Context, id int) (*GroceryItem, error) {
	return c.Query().Where(groceryitem.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GroceryItemClient) GetX(ctx context.Context, id int) *GroceryItem {
	gi, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return gi
}

// QueryGrocerylist queries the grocerylist edge of a GroceryItem.
func (c *GroceryItemClient) QueryGrocerylist(gi *GroceryItem) *GroceryListQuery {
	query := &GroceryListQuery{config: c.config}
	id := gi.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(groceryitem.Table, groceryitem.FieldID, id),
		sqlgraph.To(grocerylist.Table, grocerylist.FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, groceryitem.GrocerylistTable, groceryitem.GrocerylistColumn),
	)
	query.sql = sqlgraph.Neighbors(gi.driver.Dialect(), step)

	return query
}

// Hooks returns the client hooks.
func (c *GroceryItemClient) Hooks() []Hook {
	return c.hooks.GroceryItem
}

// GroceryListClient is a client for the GroceryList schema.
type GroceryListClient struct {
	config
}

// NewGroceryListClient returns a client for the GroceryList from the given config.
func NewGroceryListClient(c config) *GroceryListClient {
	return &GroceryListClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `grocerylist.Hooks(f(g(h())))`.
func (c *GroceryListClient) Use(hooks ...Hook) {
	c.hooks.GroceryList = append(c.hooks.GroceryList, hooks...)
}

// Create returns a create builder for GroceryList.
func (c *GroceryListClient) Create() *GroceryListCreate {
	mutation := newGroceryListMutation(c.config, OpCreate)
	return &GroceryListCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for GroceryList.
func (c *GroceryListClient) Update() *GroceryListUpdate {
	mutation := newGroceryListMutation(c.config, OpUpdate)
	return &GroceryListUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GroceryListClient) UpdateOne(gl *GroceryList) *GroceryListUpdateOne {
	return c.UpdateOneID(gl.ID)
}

// UpdateOneID returns an update builder for the given id.
func (c *GroceryListClient) UpdateOneID(id int) *GroceryListUpdateOne {
	mutation := newGroceryListMutation(c.config, OpUpdateOne)
	mutation.id = &id
	return &GroceryListUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GroceryList.
func (c *GroceryListClient) Delete() *GroceryListDelete {
	mutation := newGroceryListMutation(c.config, OpDelete)
	return &GroceryListDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *GroceryListClient) DeleteOne(gl *GroceryList) *GroceryListDeleteOne {
	return c.DeleteOneID(gl.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *GroceryListClient) DeleteOneID(id int) *GroceryListDeleteOne {
	builder := c.Delete().Where(grocerylist.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GroceryListDeleteOne{builder}
}

// Create returns a query builder for GroceryList.
func (c *GroceryListClient) Query() *GroceryListQuery {
	return &GroceryListQuery{config: c.config}
}

// Get returns a GroceryList entity by its id.
func (c *GroceryListClient) Get(ctx context.Context, id int) (*GroceryList, error) {
	return c.Query().Where(grocerylist.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GroceryListClient) GetX(ctx context.Context, id int) *GroceryList {
	gl, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return gl
}

// QueryMembers queries the members edge of a GroceryList.
func (c *GroceryListClient) QueryMembers(gl *GroceryList) *UserQuery {
	query := &UserQuery{config: c.config}
	id := gl.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(grocerylist.Table, grocerylist.FieldID, id),
		sqlgraph.To(user.Table, user.FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, grocerylist.MembersTable, grocerylist.MembersPrimaryKey...),
	)
	query.sql = sqlgraph.Neighbors(gl.driver.Dialect(), step)

	return query
}

// Hooks returns the client hooks.
func (c *GroceryListClient) Hooks() []Hook {
	return c.hooks.GroceryList
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a create builder for User.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	return c.UpdateOneID(u.ID)
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne)
	mutation.id = &id
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Create returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{config: c.config}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	u, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return u
}

// QueryGrocerylist queries the grocerylist edge of a User.
func (c *UserClient) QueryGrocerylist(u *User) *GroceryListQuery {
	query := &GroceryListQuery{config: c.config}
	id := u.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(user.Table, user.FieldID, id),
		sqlgraph.To(grocerylist.Table, grocerylist.FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, user.GrocerylistTable, user.GrocerylistPrimaryKey...),
	)
	query.sql = sqlgraph.Neighbors(u.driver.Dialect(), step)

	return query
}

// QueryActiveList queries the active_list edge of a User.
func (c *UserClient) QueryActiveList(u *User) *GroceryListQuery {
	query := &GroceryListQuery{config: c.config}
	id := u.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(user.Table, user.FieldID, id),
		sqlgraph.To(grocerylist.Table, grocerylist.FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, user.ActiveListTable, user.ActiveListColumn),
	)
	query.sql = sqlgraph.Neighbors(u.driver.Dialect(), step)

	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// UserIDMappingClient is a client for the UserIDMapping schema.
type UserIDMappingClient struct {
	config
}

// NewUserIDMappingClient returns a client for the UserIDMapping from the given config.
func NewUserIDMappingClient(c config) *UserIDMappingClient {
	return &UserIDMappingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `useridmapping.Hooks(f(g(h())))`.
func (c *UserIDMappingClient) Use(hooks ...Hook) {
	c.hooks.UserIDMapping = append(c.hooks.UserIDMapping, hooks...)
}

// Create returns a create builder for UserIDMapping.
func (c *UserIDMappingClient) Create() *UserIDMappingCreate {
	mutation := newUserIDMappingMutation(c.config, OpCreate)
	return &UserIDMappingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for UserIDMapping.
func (c *UserIDMappingClient) Update() *UserIDMappingUpdate {
	mutation := newUserIDMappingMutation(c.config, OpUpdate)
	return &UserIDMappingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserIDMappingClient) UpdateOne(uim *UserIDMapping) *UserIDMappingUpdateOne {
	return c.UpdateOneID(uim.ID)
}

// UpdateOneID returns an update builder for the given id.
func (c *UserIDMappingClient) UpdateOneID(id int) *UserIDMappingUpdateOne {
	mutation := newUserIDMappingMutation(c.config, OpUpdateOne)
	mutation.id = &id
	return &UserIDMappingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserIDMapping.
func (c *UserIDMappingClient) Delete() *UserIDMappingDelete {
	mutation := newUserIDMappingMutation(c.config, OpDelete)
	return &UserIDMappingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserIDMappingClient) DeleteOne(uim *UserIDMapping) *UserIDMappingDeleteOne {
	return c.DeleteOneID(uim.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserIDMappingClient) DeleteOneID(id int) *UserIDMappingDeleteOne {
	builder := c.Delete().Where(useridmapping.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserIDMappingDeleteOne{builder}
}

// Create returns a query builder for UserIDMapping.
func (c *UserIDMappingClient) Query() *UserIDMappingQuery {
	return &UserIDMappingQuery{config: c.config}
}

// Get returns a UserIDMapping entity by its id.
func (c *UserIDMappingClient) Get(ctx context.Context, id int) (*UserIDMapping, error) {
	return c.Query().Where(useridmapping.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserIDMappingClient) GetX(ctx context.Context, id int) *UserIDMapping {
	uim, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return uim
}

// QueryUser queries the user edge of a UserIDMapping.
func (c *UserIDMappingClient) QueryUser(uim *UserIDMapping) *UserQuery {
	query := &UserQuery{config: c.config}
	id := uim.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(useridmapping.Table, useridmapping.FieldID, id),
		sqlgraph.To(user.Table, user.FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, useridmapping.UserTable, useridmapping.UserColumn),
	)
	query.sql = sqlgraph.Neighbors(uim.driver.Dialect(), step)

	return query
}

// Hooks returns the client hooks.
func (c *UserIDMappingClient) Hooks() []Hook {
	return c.hooks.UserIDMapping
}
