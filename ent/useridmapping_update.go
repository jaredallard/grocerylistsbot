// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/jaredallard/grocerylistsbot/ent/predicate"
	"github.com/jaredallard/grocerylistsbot/ent/user"
	"github.com/jaredallard/grocerylistsbot/ent/useridmapping"
)

// UserIDMappingUpdate is the builder for updating UserIDMapping entities.
type UserIDMappingUpdate struct {
	config
	hooks      []Hook
	mutation   *UserIDMappingMutation
	predicates []predicate.UserIDMapping
}

// Where adds a new predicate for the builder.
func (uimu *UserIDMappingUpdate) Where(ps ...predicate.UserIDMapping) *UserIDMappingUpdate {
	uimu.predicates = append(uimu.predicates, ps...)
	return uimu
}

// SetCreatedAt sets the created_at field.
func (uimu *UserIDMappingUpdate) SetCreatedAt(t time.Time) *UserIDMappingUpdate {
	uimu.mutation.SetCreatedAt(t)
	return uimu
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (uimu *UserIDMappingUpdate) SetNillableCreatedAt(t *time.Time) *UserIDMappingUpdate {
	if t != nil {
		uimu.SetCreatedAt(*t)
	}
	return uimu
}

// SetModifiedAt sets the modified_at field.
func (uimu *UserIDMappingUpdate) SetModifiedAt(t time.Time) *UserIDMappingUpdate {
	uimu.mutation.SetModifiedAt(t)
	return uimu
}

// SetNillableModifiedAt sets the modified_at field if the given value is not nil.
func (uimu *UserIDMappingUpdate) SetNillableModifiedAt(t *time.Time) *UserIDMappingUpdate {
	if t != nil {
		uimu.SetModifiedAt(*t)
	}
	return uimu
}

// SetDeletedAt sets the deleted_at field.
func (uimu *UserIDMappingUpdate) SetDeletedAt(t time.Time) *UserIDMappingUpdate {
	uimu.mutation.SetDeletedAt(t)
	return uimu
}

// SetNillableDeletedAt sets the deleted_at field if the given value is not nil.
func (uimu *UserIDMappingUpdate) SetNillableDeletedAt(t *time.Time) *UserIDMappingUpdate {
	if t != nil {
		uimu.SetDeletedAt(*t)
	}
	return uimu
}

// ClearDeletedAt clears the value of deleted_at.
func (uimu *UserIDMappingUpdate) ClearDeletedAt() *UserIDMappingUpdate {
	uimu.mutation.ClearDeletedAt()
	return uimu
}

// SetPlatformType sets the platform_type field.
func (uimu *UserIDMappingUpdate) SetPlatformType(ut useridmapping.PlatformType) *UserIDMappingUpdate {
	uimu.mutation.SetPlatformType(ut)
	return uimu
}

// SetPlatformID sets the platform_id field.
func (uimu *UserIDMappingUpdate) SetPlatformID(s string) *UserIDMappingUpdate {
	uimu.mutation.SetPlatformID(s)
	return uimu
}

// SetUserID sets the user edge to User by id.
func (uimu *UserIDMappingUpdate) SetUserID(id int) *UserIDMappingUpdate {
	uimu.mutation.SetUserID(id)
	return uimu
}

// SetNillableUserID sets the user edge to User by id if the given value is not nil.
func (uimu *UserIDMappingUpdate) SetNillableUserID(id *int) *UserIDMappingUpdate {
	if id != nil {
		uimu = uimu.SetUserID(*id)
	}
	return uimu
}

// SetUser sets the user edge to User.
func (uimu *UserIDMappingUpdate) SetUser(u *User) *UserIDMappingUpdate {
	return uimu.SetUserID(u.ID)
}

// ClearUser clears the user edge to User.
func (uimu *UserIDMappingUpdate) ClearUser() *UserIDMappingUpdate {
	uimu.mutation.ClearUser()
	return uimu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (uimu *UserIDMappingUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := uimu.mutation.PlatformType(); ok {
		if err := useridmapping.PlatformTypeValidator(v); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"platform_type\": %v", err)
		}
	}

	var (
		err      error
		affected int
	)
	if len(uimu.hooks) == 0 {
		affected, err = uimu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserIDMappingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uimu.mutation = mutation
			affected, err = uimu.sqlSave(ctx)
			return affected, err
		})
		for i := len(uimu.hooks) - 1; i >= 0; i-- {
			mut = uimu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uimu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (uimu *UserIDMappingUpdate) SaveX(ctx context.Context) int {
	affected, err := uimu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uimu *UserIDMappingUpdate) Exec(ctx context.Context) error {
	_, err := uimu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uimu *UserIDMappingUpdate) ExecX(ctx context.Context) {
	if err := uimu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uimu *UserIDMappingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   useridmapping.Table,
			Columns: useridmapping.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: useridmapping.FieldID,
			},
		},
	}
	if ps := uimu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uimu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: useridmapping.FieldCreatedAt,
		})
	}
	if value, ok := uimu.mutation.ModifiedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: useridmapping.FieldModifiedAt,
		})
	}
	if value, ok := uimu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: useridmapping.FieldDeletedAt,
		})
	}
	if uimu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: useridmapping.FieldDeletedAt,
		})
	}
	if value, ok := uimu.mutation.PlatformType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: useridmapping.FieldPlatformType,
		})
	}
	if value, ok := uimu.mutation.PlatformID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: useridmapping.FieldPlatformID,
		})
	}
	if uimu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   useridmapping.UserTable,
			Columns: []string{useridmapping.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uimu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   useridmapping.UserTable,
			Columns: []string{useridmapping.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uimu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{useridmapping.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// UserIDMappingUpdateOne is the builder for updating a single UserIDMapping entity.
type UserIDMappingUpdateOne struct {
	config
	hooks    []Hook
	mutation *UserIDMappingMutation
}

// SetCreatedAt sets the created_at field.
func (uimuo *UserIDMappingUpdateOne) SetCreatedAt(t time.Time) *UserIDMappingUpdateOne {
	uimuo.mutation.SetCreatedAt(t)
	return uimuo
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (uimuo *UserIDMappingUpdateOne) SetNillableCreatedAt(t *time.Time) *UserIDMappingUpdateOne {
	if t != nil {
		uimuo.SetCreatedAt(*t)
	}
	return uimuo
}

// SetModifiedAt sets the modified_at field.
func (uimuo *UserIDMappingUpdateOne) SetModifiedAt(t time.Time) *UserIDMappingUpdateOne {
	uimuo.mutation.SetModifiedAt(t)
	return uimuo
}

// SetNillableModifiedAt sets the modified_at field if the given value is not nil.
func (uimuo *UserIDMappingUpdateOne) SetNillableModifiedAt(t *time.Time) *UserIDMappingUpdateOne {
	if t != nil {
		uimuo.SetModifiedAt(*t)
	}
	return uimuo
}

// SetDeletedAt sets the deleted_at field.
func (uimuo *UserIDMappingUpdateOne) SetDeletedAt(t time.Time) *UserIDMappingUpdateOne {
	uimuo.mutation.SetDeletedAt(t)
	return uimuo
}

// SetNillableDeletedAt sets the deleted_at field if the given value is not nil.
func (uimuo *UserIDMappingUpdateOne) SetNillableDeletedAt(t *time.Time) *UserIDMappingUpdateOne {
	if t != nil {
		uimuo.SetDeletedAt(*t)
	}
	return uimuo
}

// ClearDeletedAt clears the value of deleted_at.
func (uimuo *UserIDMappingUpdateOne) ClearDeletedAt() *UserIDMappingUpdateOne {
	uimuo.mutation.ClearDeletedAt()
	return uimuo
}

// SetPlatformType sets the platform_type field.
func (uimuo *UserIDMappingUpdateOne) SetPlatformType(ut useridmapping.PlatformType) *UserIDMappingUpdateOne {
	uimuo.mutation.SetPlatformType(ut)
	return uimuo
}

// SetPlatformID sets the platform_id field.
func (uimuo *UserIDMappingUpdateOne) SetPlatformID(s string) *UserIDMappingUpdateOne {
	uimuo.mutation.SetPlatformID(s)
	return uimuo
}

// SetUserID sets the user edge to User by id.
func (uimuo *UserIDMappingUpdateOne) SetUserID(id int) *UserIDMappingUpdateOne {
	uimuo.mutation.SetUserID(id)
	return uimuo
}

// SetNillableUserID sets the user edge to User by id if the given value is not nil.
func (uimuo *UserIDMappingUpdateOne) SetNillableUserID(id *int) *UserIDMappingUpdateOne {
	if id != nil {
		uimuo = uimuo.SetUserID(*id)
	}
	return uimuo
}

// SetUser sets the user edge to User.
func (uimuo *UserIDMappingUpdateOne) SetUser(u *User) *UserIDMappingUpdateOne {
	return uimuo.SetUserID(u.ID)
}

// ClearUser clears the user edge to User.
func (uimuo *UserIDMappingUpdateOne) ClearUser() *UserIDMappingUpdateOne {
	uimuo.mutation.ClearUser()
	return uimuo
}

// Save executes the query and returns the updated entity.
func (uimuo *UserIDMappingUpdateOne) Save(ctx context.Context) (*UserIDMapping, error) {
	if v, ok := uimuo.mutation.PlatformType(); ok {
		if err := useridmapping.PlatformTypeValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"platform_type\": %v", err)
		}
	}

	var (
		err  error
		node *UserIDMapping
	)
	if len(uimuo.hooks) == 0 {
		node, err = uimuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserIDMappingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uimuo.mutation = mutation
			node, err = uimuo.sqlSave(ctx)
			return node, err
		})
		for i := len(uimuo.hooks) - 1; i >= 0; i-- {
			mut = uimuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uimuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (uimuo *UserIDMappingUpdateOne) SaveX(ctx context.Context) *UserIDMapping {
	uim, err := uimuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return uim
}

// Exec executes the query on the entity.
func (uimuo *UserIDMappingUpdateOne) Exec(ctx context.Context) error {
	_, err := uimuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uimuo *UserIDMappingUpdateOne) ExecX(ctx context.Context) {
	if err := uimuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uimuo *UserIDMappingUpdateOne) sqlSave(ctx context.Context) (uim *UserIDMapping, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   useridmapping.Table,
			Columns: useridmapping.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: useridmapping.FieldID,
			},
		},
	}
	id, ok := uimuo.mutation.ID()
	if !ok {
		return nil, fmt.Errorf("missing UserIDMapping.ID for update")
	}
	_spec.Node.ID.Value = id
	if value, ok := uimuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: useridmapping.FieldCreatedAt,
		})
	}
	if value, ok := uimuo.mutation.ModifiedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: useridmapping.FieldModifiedAt,
		})
	}
	if value, ok := uimuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: useridmapping.FieldDeletedAt,
		})
	}
	if uimuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: useridmapping.FieldDeletedAt,
		})
	}
	if value, ok := uimuo.mutation.PlatformType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: useridmapping.FieldPlatformType,
		})
	}
	if value, ok := uimuo.mutation.PlatformID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: useridmapping.FieldPlatformID,
		})
	}
	if uimuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   useridmapping.UserTable,
			Columns: []string{useridmapping.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uimuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   useridmapping.UserTable,
			Columns: []string{useridmapping.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	uim = &UserIDMapping{config: uimuo.config}
	_spec.Assign = uim.assignValues
	_spec.ScanValues = uim.scanValues()
	if err = sqlgraph.UpdateNode(ctx, uimuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{useridmapping.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return uim, nil
}
