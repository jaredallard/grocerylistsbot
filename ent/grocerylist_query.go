// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/jaredallard/grocerylistsbot/ent/grocerylist"
	"github.com/jaredallard/grocerylistsbot/ent/predicate"
	"github.com/jaredallard/grocerylistsbot/ent/user"
)

// GroceryListQuery is the builder for querying GroceryList entities.
type GroceryListQuery struct {
	config
	limit      *int
	offset     *int
	order      []Order
	unique     []string
	predicates []predicate.GroceryList
	// eager-loading edges.
	withMembers *UserQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the builder.
func (glq *GroceryListQuery) Where(ps ...predicate.GroceryList) *GroceryListQuery {
	glq.predicates = append(glq.predicates, ps...)
	return glq
}

// Limit adds a limit step to the query.
func (glq *GroceryListQuery) Limit(limit int) *GroceryListQuery {
	glq.limit = &limit
	return glq
}

// Offset adds an offset step to the query.
func (glq *GroceryListQuery) Offset(offset int) *GroceryListQuery {
	glq.offset = &offset
	return glq
}

// Order adds an order step to the query.
func (glq *GroceryListQuery) Order(o ...Order) *GroceryListQuery {
	glq.order = append(glq.order, o...)
	return glq
}

// QueryMembers chains the current query on the members edge.
func (glq *GroceryListQuery) QueryMembers() *UserQuery {
	query := &UserQuery{config: glq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := glq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(grocerylist.Table, grocerylist.FieldID, glq.sqlQuery()),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, grocerylist.MembersTable, grocerylist.MembersPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(glq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first GroceryList entity in the query. Returns *NotFoundError when no grocerylist was found.
func (glq *GroceryListQuery) First(ctx context.Context) (*GroceryList, error) {
	gls, err := glq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(gls) == 0 {
		return nil, &NotFoundError{grocerylist.Label}
	}
	return gls[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (glq *GroceryListQuery) FirstX(ctx context.Context) *GroceryList {
	gl, err := glq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return gl
}

// FirstID returns the first GroceryList id in the query. Returns *NotFoundError when no id was found.
func (glq *GroceryListQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = glq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{grocerylist.Label}
		return
	}
	return ids[0], nil
}

// FirstXID is like FirstID, but panics if an error occurs.
func (glq *GroceryListQuery) FirstXID(ctx context.Context) int {
	id, err := glq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only GroceryList entity in the query, returns an error if not exactly one entity was returned.
func (glq *GroceryListQuery) Only(ctx context.Context) (*GroceryList, error) {
	gls, err := glq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(gls) {
	case 1:
		return gls[0], nil
	case 0:
		return nil, &NotFoundError{grocerylist.Label}
	default:
		return nil, &NotSingularError{grocerylist.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (glq *GroceryListQuery) OnlyX(ctx context.Context) *GroceryList {
	gl, err := glq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return gl
}

// OnlyID returns the only GroceryList id in the query, returns an error if not exactly one id was returned.
func (glq *GroceryListQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = glq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{grocerylist.Label}
	default:
		err = &NotSingularError{grocerylist.Label}
	}
	return
}

// OnlyXID is like OnlyID, but panics if an error occurs.
func (glq *GroceryListQuery) OnlyXID(ctx context.Context) int {
	id, err := glq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of GroceryLists.
func (glq *GroceryListQuery) All(ctx context.Context) ([]*GroceryList, error) {
	if err := glq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return glq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (glq *GroceryListQuery) AllX(ctx context.Context) []*GroceryList {
	gls, err := glq.All(ctx)
	if err != nil {
		panic(err)
	}
	return gls
}

// IDs executes the query and returns a list of GroceryList ids.
func (glq *GroceryListQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := glq.Select(grocerylist.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (glq *GroceryListQuery) IDsX(ctx context.Context) []int {
	ids, err := glq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (glq *GroceryListQuery) Count(ctx context.Context) (int, error) {
	if err := glq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return glq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (glq *GroceryListQuery) CountX(ctx context.Context) int {
	count, err := glq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (glq *GroceryListQuery) Exist(ctx context.Context) (bool, error) {
	if err := glq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return glq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (glq *GroceryListQuery) ExistX(ctx context.Context) bool {
	exist, err := glq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (glq *GroceryListQuery) Clone() *GroceryListQuery {
	return &GroceryListQuery{
		config:     glq.config,
		limit:      glq.limit,
		offset:     glq.offset,
		order:      append([]Order{}, glq.order...),
		unique:     append([]string{}, glq.unique...),
		predicates: append([]predicate.GroceryList{}, glq.predicates...),
		// clone intermediate query.
		sql:  glq.sql.Clone(),
		path: glq.path,
	}
}

//  WithMembers tells the query-builder to eager-loads the nodes that are connected to
// the "members" edge. The optional arguments used to configure the query builder of the edge.
func (glq *GroceryListQuery) WithMembers(opts ...func(*UserQuery)) *GroceryListQuery {
	query := &UserQuery{config: glq.config}
	for _, opt := range opts {
		opt(query)
	}
	glq.withMembers = query
	return glq
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.GroceryList.Query().
//		GroupBy(grocerylist.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (glq *GroceryListQuery) GroupBy(field string, fields ...string) *GroceryListGroupBy {
	group := &GroceryListGroupBy{config: glq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := glq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return glq.sqlQuery(), nil
	}
	return group
}

// Select one or more fields from the given query.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.GroceryList.Query().
//		Select(grocerylist.FieldCreatedAt).
//		Scan(ctx, &v)
//
func (glq *GroceryListQuery) Select(field string, fields ...string) *GroceryListSelect {
	selector := &GroceryListSelect{config: glq.config}
	selector.fields = append([]string{field}, fields...)
	selector.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := glq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return glq.sqlQuery(), nil
	}
	return selector
}

func (glq *GroceryListQuery) prepareQuery(ctx context.Context) error {
	if glq.path != nil {
		prev, err := glq.path(ctx)
		if err != nil {
			return err
		}
		glq.sql = prev
	}
	return nil
}

func (glq *GroceryListQuery) sqlAll(ctx context.Context) ([]*GroceryList, error) {
	var (
		nodes       = []*GroceryList{}
		_spec       = glq.querySpec()
		loadedTypes = [1]bool{
			glq.withMembers != nil,
		}
	)
	_spec.ScanValues = func() []interface{} {
		node := &GroceryList{config: glq.config}
		nodes = append(nodes, node)
		values := node.scanValues()
		return values
	}
	_spec.Assign = func(values ...interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(values...)
	}
	if err := sqlgraph.QueryNodes(ctx, glq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := glq.withMembers; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		ids := make(map[int]*GroceryList, len(nodes))
		for _, node := range nodes {
			ids[node.ID] = node
			fks = append(fks, node.ID)
		}
		var (
			edgeids []int
			edges   = make(map[int][]*GroceryList)
		)
		_spec := &sqlgraph.EdgeQuerySpec{
			Edge: &sqlgraph.EdgeSpec{
				Inverse: true,
				Table:   grocerylist.MembersTable,
				Columns: grocerylist.MembersPrimaryKey,
			},
			Predicate: func(s *sql.Selector) {
				s.Where(sql.InValues(grocerylist.MembersPrimaryKey[1], fks...))
			},

			ScanValues: func() [2]interface{} {
				return [2]interface{}{&sql.NullInt64{}, &sql.NullInt64{}}
			},
			Assign: func(out, in interface{}) error {
				eout, ok := out.(*sql.NullInt64)
				if !ok || eout == nil {
					return fmt.Errorf("unexpected id value for edge-out")
				}
				ein, ok := in.(*sql.NullInt64)
				if !ok || ein == nil {
					return fmt.Errorf("unexpected id value for edge-in")
				}
				outValue := int(eout.Int64)
				inValue := int(ein.Int64)
				node, ok := ids[outValue]
				if !ok {
					return fmt.Errorf("unexpected node id in edges: %v", outValue)
				}
				edgeids = append(edgeids, inValue)
				edges[inValue] = append(edges[inValue], node)
				return nil
			},
		}
		if err := sqlgraph.QueryEdges(ctx, glq.driver, _spec); err != nil {
			return nil, fmt.Errorf(`query edges "members": %v`, err)
		}
		query.Where(user.IDIn(edgeids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := edges[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected "members" node returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Members = append(nodes[i].Edges.Members, n)
			}
		}
	}

	return nodes, nil
}

func (glq *GroceryListQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := glq.querySpec()
	return sqlgraph.CountNodes(ctx, glq.driver, _spec)
}

func (glq *GroceryListQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := glq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (glq *GroceryListQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   grocerylist.Table,
			Columns: grocerylist.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: grocerylist.FieldID,
			},
		},
		From:   glq.sql,
		Unique: true,
	}
	if ps := glq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := glq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := glq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := glq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (glq *GroceryListQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(glq.driver.Dialect())
	t1 := builder.Table(grocerylist.Table)
	selector := builder.Select(t1.Columns(grocerylist.Columns...)...).From(t1)
	if glq.sql != nil {
		selector = glq.sql
		selector.Select(selector.Columns(grocerylist.Columns...)...)
	}
	for _, p := range glq.predicates {
		p(selector)
	}
	for _, p := range glq.order {
		p(selector)
	}
	if offset := glq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := glq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// GroceryListGroupBy is the builder for group-by GroceryList entities.
type GroceryListGroupBy struct {
	config
	fields []string
	fns    []Aggregate
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (glgb *GroceryListGroupBy) Aggregate(fns ...Aggregate) *GroceryListGroupBy {
	glgb.fns = append(glgb.fns, fns...)
	return glgb
}

// Scan applies the group-by query and scan the result into the given value.
func (glgb *GroceryListGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := glgb.path(ctx)
	if err != nil {
		return err
	}
	glgb.sql = query
	return glgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (glgb *GroceryListGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := glgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (glgb *GroceryListGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(glgb.fields) > 1 {
		return nil, errors.New("ent: GroceryListGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := glgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (glgb *GroceryListGroupBy) StringsX(ctx context.Context) []string {
	v, err := glgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (glgb *GroceryListGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(glgb.fields) > 1 {
		return nil, errors.New("ent: GroceryListGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := glgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (glgb *GroceryListGroupBy) IntsX(ctx context.Context) []int {
	v, err := glgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (glgb *GroceryListGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(glgb.fields) > 1 {
		return nil, errors.New("ent: GroceryListGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := glgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (glgb *GroceryListGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := glgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (glgb *GroceryListGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(glgb.fields) > 1 {
		return nil, errors.New("ent: GroceryListGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := glgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (glgb *GroceryListGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := glgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (glgb *GroceryListGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := glgb.sqlQuery().Query()
	if err := glgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (glgb *GroceryListGroupBy) sqlQuery() *sql.Selector {
	selector := glgb.sql
	columns := make([]string, 0, len(glgb.fields)+len(glgb.fns))
	columns = append(columns, glgb.fields...)
	for _, fn := range glgb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(glgb.fields...)
}

// GroceryListSelect is the builder for select fields of GroceryList entities.
type GroceryListSelect struct {
	config
	fields []string
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Scan applies the selector query and scan the result into the given value.
func (gls *GroceryListSelect) Scan(ctx context.Context, v interface{}) error {
	query, err := gls.path(ctx)
	if err != nil {
		return err
	}
	gls.sql = query
	return gls.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (gls *GroceryListSelect) ScanX(ctx context.Context, v interface{}) {
	if err := gls.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (gls *GroceryListSelect) Strings(ctx context.Context) ([]string, error) {
	if len(gls.fields) > 1 {
		return nil, errors.New("ent: GroceryListSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := gls.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (gls *GroceryListSelect) StringsX(ctx context.Context) []string {
	v, err := gls.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (gls *GroceryListSelect) Ints(ctx context.Context) ([]int, error) {
	if len(gls.fields) > 1 {
		return nil, errors.New("ent: GroceryListSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := gls.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (gls *GroceryListSelect) IntsX(ctx context.Context) []int {
	v, err := gls.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (gls *GroceryListSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(gls.fields) > 1 {
		return nil, errors.New("ent: GroceryListSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := gls.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (gls *GroceryListSelect) Float64sX(ctx context.Context) []float64 {
	v, err := gls.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (gls *GroceryListSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(gls.fields) > 1 {
		return nil, errors.New("ent: GroceryListSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := gls.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (gls *GroceryListSelect) BoolsX(ctx context.Context) []bool {
	v, err := gls.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (gls *GroceryListSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := gls.sqlQuery().Query()
	if err := gls.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (gls *GroceryListSelect) sqlQuery() sql.Querier {
	selector := gls.sql
	selector.Select(selector.Columns(gls.fields...)...)
	return selector
}
